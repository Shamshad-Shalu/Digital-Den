<%- include("../../views/partial/admin/header") %>

<style>
    #newStatus {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid var(--bs-border-color);
        background-color: var(--input-bg);
        color: var(--bs-body-color);
        font-size: 14px;
        width: 100%;
        transition: border-color var(--transition-speed), box-shadow var(--transition-speed);
    }

    #newStatus:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 0.2rem var(--primary-light);
        outline: none;
    }

    #newStatus option:not([disabled]) {
        background-color: var(--bs-card-bg); 
        color: var(--bs-body-color);
        font-weight: 500;
    }

    #newStatus option[disabled] {
        background-color: var(--spec-bg); 
        color: var(--text-muted);
        opacity: 0.6; 
        font-style: italic; 
    }

    #newStatus option:not([disabled]):hover {
        background-color: var(--bs-body-bg);
    }

</style>
<!-- Order Management Section -->
<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3">Order Management</h1>
            <p class="text-muted">Track and manage customer orders</p>
        </div>
        <div>
            <button type="button" class="btn btn-primary" id="exportOrdersBtn">
                <i class="fas fa-file-export me-2"></i>Export Orders
            </button>
        </div>
    </div>

    <!-- Search and Filter Bar -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="orderFilterForm" class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control border-start-0 ps-0" placeholder="Search by Order ID or Username..." name="search" id="searchInput" value="<%= typeof search !== 'undefined' ? search : '' %>">
                        <button class="btn btn-primary" type="submit">Search</button>
                        <% if (search || orderStatus !== 'All' || paymentStatus !== 'All' || dateRange !== 'All') { %>
                            <button type="button" class="btn btn-secondary" id="clearFilters">Clear</button>
                        <% } %>
                    </div>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="orderStatusFilter" name="orderStatus">
                        <option value="All" <%= orderStatus === 'All' ? 'selected' : '' %>>All Status</option>
                        <option value="Pending" <%= orderStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                        <option value="Processing" <%= orderStatus === 'Processing' ? 'selected' : '' %>>Processing</option>
                        <option value="Shipped" <%= orderStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="Out for Delivery" <%= orderStatus === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
                        <option value="Delivered" <%= orderStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                        <option value="Cancelled" <%= orderStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                        <option value="Returned" <%= orderStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="paymentStatusFilter" name="paymentStatus">
                        <option value="All" <%= paymentStatus === 'All' ? 'selected' : '' %>>Payment Status</option>
                        <option value="Paid" <%= paymentStatus === 'Paid' ? 'selected' : '' %>>Paid</option>
                        <option value="Pending" <%= paymentStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                        <option value="Failed" <%= paymentStatus === 'Failed' ? 'selected' : '' %>>Failed</option>
                        <option value="Refunded" <%= paymentStatus === 'Refunded' ? 'selected' : '' %>>Refunded</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="dateFilter" name="dateRange">
                        <option value="All" <%= dateRange === 'All' ? 'selected' : '' %>>All Time</option>
                        <option value="Today" <%= dateRange === 'Today' ? 'selected' : '' %>>Today</option>
                        <option value="Yesterday" <%= dateRange === 'Yesterday' ? 'selected' : '' %>>Yesterday</option>
                        <option value="Last7Days" <%= dateRange === 'Last7Days' ? 'selected' : '' %>>Last 7 Days</option>
                        <option value="Last30Days" <%= dateRange === 'Last30Days' ? 'selected' : '' %>>Last 30 Days</option>
                        <option value="ThisMonth" <%= dateRange === 'ThisMonth' ? 'selected' : '' %>>This Month</option>
                        <option value="LastMonth" <%= dateRange === 'LastMonth' ? 'selected' : '' %>>Last Month</option>
                    </select>
                </div>
            </form>
        </div>
    </div>

    <!-- Orders Table -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover align-middle order-table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Items</th>
                            <th>Total</th>
                            <th>paymentMethod</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        <!-- Dynamically populated -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div id="paginationSection" class="d-flex justify-content-between align-items-center mt-4">
                <!-- Dynamically populated -->
            </div>
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="orderDetailsBody">
                <!-- Dynamically populated -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="printOrderBtn">
                    <i class="fas fa-print me-2"></i>Print Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Status Confirmation Modal -->
<div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="statusModalLabel">Change Order Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="statusMessage"></p>
                <div class="mb-3">
                    <label for="newStatus" class="form-label">New Status</label>
                    <select class="form-select" id="newStatus">
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Out for Delivery">Out for Delivery</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Returned">Returned</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmStatus">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Return Request Modal -->
<div class="modal fade" id="returnRequestModal" tabindex="-1" aria-labelledby="returnRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnRequestModalLabel">Process Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="returnRequestBody">
                <!-- Dynamically populated -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="processReturnBtn">Process Return</button>
            </div>
        </div>
    </div>
</div>

<script>

    const validTransitions = {
        'Pending': ['Processing', 'Cancelled'],
        'Processing': ['Shipped', 'Cancelled'],
        'Shipped': ['Out for Delivery', 'Cancelled'],
        'Out for Delivery': ['Delivered'],
        'Delivered': ['Return Request'],
        'Return Request': ['Delivered', 'Returned',"Partially Returned"],
        'Returned': [],
        'Cancelled': [],
    };

    function getStatusColorClass(status) {
        switch (status) {
            case 'Pending': return 'bg-warning';     
            case 'Processing': return 'bg-primary';    
            case 'Shipped': return 'bg-info';             
            case 'Out for Delivery': return 'bg-purple';  
            case 'Delivered': return 'bg-success';         
            case 'Cancelled': return 'bg-danger';       
            case 'Returned': return 'bg-dark';            
            case 'Partially Returned': return 'bg-secondary'; 
            case 'Return Request': return 'bg-warning';  
            default: return 'bg-light'; 
        }
    }

    async function fetchOrders(page = 1) {
        const search = document.getElementById('searchInput').value;
        const orderStatus = document.getElementById('orderStatusFilter').value;
        const paymentStatus = document.getElementById('paymentStatusFilter').value;
        const dateRange = document.getElementById('dateFilter').value;

        const queryParams = new URLSearchParams({
            page,
            search,
            orderStatus,
            paymentStatus,
            dateRange,
        }).toString();

        try {
            const response = await fetch(`/admin/orders?${queryParams}`, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
            });

            if (response.status === 401 || response.status === 403) {
                Swal.fire({
                    icon: 'error',
                    title: 'Unauthorized',
                    text: 'Please log in to continue',
                }).then(() => {
                    window.location.href = '/admin/login';
                });
                return;
            }

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to fetch orders');
            }

            const data = await response.json();
            const ordersTableBody = document.getElementById('ordersTableBody');
            ordersTableBody.innerHTML = '';

            if (data.orders && data.orders.length > 0) {
                data.orders.forEach((order, index) => {
                    const row = `
                        <tr>
                            <td>${(data.page - 1) * data.limit + index + 1}</td>
                            <td>
                                <span class="fw-medium">#${order.orderId}</span>
                                ${order.status === 'Return Request' ? '<span class="badge bg-warning text-dark ms-1">Return Request</span>' : ''}
                            </td>
                            <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                            <td>
                                <div class="fw-medium">${order.customer.name}</div>
                                <div class="text-muted small">${order.customer.email}</div>
                            </td>
                            <td>${order.orderedItems.length} items</td>
                            <td><span class="fw-bold">₹${order.finalAmount.toLocaleString('en-IN')}</span></td>
                            <td width = "70" >
                                <span class="badge ${ order.paymentMethod === 'COD' ? 'bg-warning' : order.paymentMethod === 'Online' ? 'bg-success' :'bg-info'}">${order.paymentMethod}</span>
                            </td>
                            <td>
                                <button  class="btn btn-sm status-btn ${getStatusColorClass(order.status)} text-white"
                                   ${order.status === "Returned" || order.status === "Cancelled" || order.status === "Delivered" || order.status === "Return Request"  || order.status === "Partially Returned" ? 'disabled' : ''}
                                    data-bs-toggle="modal" data-bs-target="#statusModal"
                                    data-status="${order.status}" data-id="${order.orderId}">
                                    <span class="status-text">${order.status}</span>
                                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                </button>
                            </td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-info view-order-btn" data-order-id="${order.orderId}" title="View order details">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    ${order.status === 'Return Request' ? `
                                        <button class="btn btn-sm btn-outline-warning return-request-btn"
                                            data-order-id="${order.orderId}" data-return-id="${order._id}" 
                                            data-bs-toggle="modal" data-bs-target="#returnRequestModal" 
                                            title="Process return request">
                                            <i class="fas fa-undo-alt"></i>
                                        </button>
                                    ` : ''}
                                </div>
                            </td>
                        </tr>
                    `;
                    ordersTableBody.insertAdjacentHTML('beforeend', row);
                });
            } else {
                ordersTableBody.innerHTML = '<tr><td colspan="8" class="text-center py-4">No orders found</td></tr>';
            }

            const paginationSection = document.getElementById('paginationSection');
            paginationSection.innerHTML = '';
            if (data.orders && data.orders.length > 0) {
                const totalPages = Math.ceil(data.count / data.limit);
                const maxPagesToShow = 5;
                const startPage = Math.max(1, data.page - Math.floor(maxPagesToShow / 2));
                const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

                const paginationHTML = `
                    <div class="text-muted">
                        Showing <span class="fw-bold">${(data.page - 1) * data.limit + 1}</span> to 
                        <span class="fw-bold">${Math.min(data.page * data.limit, data.count)}</span> of 
                        <span class="fw-bold">${data.count}</span> orders
                    </div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination mb-0">
                            <li class="page-item ${data.page <= 1 ? 'disabled' : ''}">
                                <a class="page-link" href="#" data-page="${data.page - 1}" aria-label="Previous">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                            ${Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i).map(i => `
                                <li class="page-item ${data.page === i ? 'active' : ''}">
                                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                                </li>
                            `).join('')}
                            <li class="page-item ${data.page >= totalPages ? 'disabled' : ''}">
                                <a class="page-link" href="#" data-page="${data.page + 1}" aria-label="Next">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                `;
                paginationSection.innerHTML = paginationHTML;

                document.querySelectorAll('.pagination a[data-page]').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const page = parseInt(link.getAttribute('data-page'));
                        if (page > 0 && page <= totalPages) fetchOrders(page);
                    });
                });
            }

            attachEventListeners();
        } catch (error) {
            console.error('Error fetching orders:', error);
            Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Failed to load orders' });
        }
    }

    function attachEventListeners() {
        // View Order Details
        document.querySelectorAll('.view-order-btn').forEach(btn => {
            btn.removeEventListener('click', handleViewOrder); // Prevent duplicates
            btn.addEventListener('click', handleViewOrder);
        });

        // Status Change
        const statusModal = document.getElementById('statusModal');
        let currentOrderId = '';

        //  statusModal 
        statusModal.addEventListener('show.bs.modal', (event) => {
            const button = event.relatedTarget;
            currentOrderId = button.getAttribute('data-id');
            const currentStatus = button.getAttribute('data-status');
            document.getElementById('statusMessage').textContent = 
                `Are you sure you want to change the status of order #${currentOrderId} from ${currentStatus}?`;

            const statusSelect = document.getElementById('newStatus');
            statusSelect.value = currentStatus;

            // Get all status options
            const statusOptions = statusSelect.querySelectorAll('option');
            
            // Reset styles and attributes
            statusOptions.forEach(option => {
                option.disabled = true; 
                option.setAttribute('data-enabled', 'false'); 
            });

            // Enable only the valid transitions
            const allowedStatuses = validTransitions[currentStatus] || [];
            statusOptions.forEach(option => {
                const optionValue = option.value;
                // Enable valid transitions and the current status (for display)
                if (allowedStatuses.includes(optionValue)) {
                    option.disabled = false;
                    option.setAttribute('data-enabled', 'true');
                }
                // Explicitly disable the current status to prevent selecting it
                if (optionValue === currentStatus) {
                    option.disabled = true;
                    option.setAttribute('data-enabled', 'false');
                }
            });
        });
        
        document.getElementById('confirmStatus').addEventListener('click', async () => {
            const newStatus = document.getElementById('newStatus').value;
            try {
                const response = await fetch(`/admin/orders/update-status/${currentOrderId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ status: newStatus }),
                });
                const data = await response.json();

                if (data.success) {
                    const button = document.querySelector(`.status-btn[data-id="${currentOrderId}"]`);
                    const statusText = button.querySelector('.status-text');
                    statusText.textContent = newStatus;
                    button.classList.remove(...button.classList);
                    button.classList.add('btn', 'btn-sm', 'status-btn', getStatusColorClass(newStatus), 'text-white');
                    bootstrap.Modal.getInstance(statusModal).hide();
                    Swal.fire({
                        icon: 'success',
                        title: 'Status Updated',
                        text: data.message,
                        timer: 2000,
                    }).then(() => fetchOrders());
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Failed to update status' });
            }
        });
        

        
        let currentReturnId = '';
        document.querySelectorAll('.return-request-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const orderId = btn.getAttribute('data-order-id');
                currentReturnId = btn.getAttribute('data-return-id');
                console.log("orderId :"+ orderId );
                console.log("currenreturnId :",currentReturnId)
                try {
                    const response = await fetch(`/admin/orders/details/${orderId}`);
                    if (!response.ok) throw new Error('Failed to fetch order details');
                    const { success, order, customerStats } = await response.json();
                    if (!success) throw new Error('Invalid response structure');

                
                    const returnReasons = order.orderedItems
                        .filter(item => item.returnStatus === 'Return Requested')
                        .map(item => ({
                            productName: item.product?.productName || 'Unknown',
                            reason: item.returnReason || 'No reason provided',
                        }));
                        console.log(returnReasons)

                    document.getElementById('returnRequestBody').innerHTML = `
                        <div class="row mb-4">
                            <div class="col-md-8">
                                <h6>Return Request #RTN-${order.orderId}</h6>
                                <p class="text-muted mb-0">Submitted on ${new Date(order.updatedAt).toLocaleString()}</p>
                            </div>
                            <div class="col-md-4 text-end">
                                <span class="badge bg-warning text-dark">${order.status}</span>
                            </div>
                        </div>
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header"><h6 class="mb-0">Order Information</h6></div>
                                    <div class="card-body">
                                        <p class="mb-1"><strong>Order ID:</strong> #${order.orderId}</p>
                                        <p class="mb-1"><strong>Purchase Date:</strong> ${new Date(order.createdAt).toLocaleString()}</p>
                                        <p class="mb-1"><strong>Delivery Date:</strong> ${order.status === 'Delivered' ? new Date(order.updatedAt).toLocaleString() : 'N/A'}</p>
                                        <p class="mb-0"><strong>Amount:</strong> ₹${order.finalAmount.toLocaleString('en-IN')}</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header"><h6 class="mb-0">Customer Information</h6></div>
                                    <div class="card-body">
                                        <p class="mb-1"><strong>Name:</strong> ${order.userId?.username || 'N/A'}</p>
                                        <p class="mb-1"><strong>Email:</strong> ${order.userId?.email || 'N/A'}</p>
                                        <p class="mb-1"><strong>Phone:</strong> +91 ${order.userId?.phone || order.address?.phone || 'N/A'}</p>
                                        <p class="mb-0"><strong>Previous Returns:</strong> ${customerStats?.totalReturns || 0}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-header"><h6 class="mb-0">Return Items</h6></div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table mb-0">
                                        <thead class="bg-light">
                                            <tr>
                                                <th>Product</th>
                                                <th class="text-center">Quantity</th>
                                                <th class="text-end">Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${order.orderedItems
                                                .filter(item => item.returnStatus === 'Return Requested')
                                                .map(item => `
                                                    <tr>
                                                        <td>
                                                            <div class="d-flex align-items-center">
                                                                <div>
                                                                    <h6 class="mb-0">${item.product?.productName || 'Unknown'}</h6>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center">${item.quantity || 0}</td>
                                                        <td class="text-end">₹${((item.quantity || 0) * (item.price || 0)).toLocaleString('en-IN')}</td>
                                                    </tr>
                                                `).join('') || '<tr><td colspan="3">No items to return</td></tr>'}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header"><h6 class="mb-0">Return Reasons</h6></div>
                            <div class="card-body">
                                <ul class="list-group">
                                    ${returnReasons.map(item => `
                                        <li class="list-group-item">
                                            <strong>${item.productName}:</strong> ${item.reason}
                                        </li>
                                    `).join('')}
                                </ul>
                            </div>
                        </div>
                        <div class="card mt-4">
                            <div class="card-header"><h6 class="mb-0">Return Action</h6></div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="returnStatus" class="form-label">Return Status</label>
                                    <select class="form-select" id="returnStatus">
                                        <option value="approved">Approved</option>
                                        <option value="rejected">Rejected</option>
                                        <option value="pending">Pending</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    `;
                    const returnModal = new bootstrap.Modal(document.getElementById('returnRequestModal'));
                    returnModal.show();
                } catch (error) {
                    Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to load return request details' });
                }
            });
        });

        document.getElementById('processReturnBtn').addEventListener('click', async () => {
            if (!currentReturnId) {
                Swal.fire({ icon: 'error', title: 'Error', text: 'No return request selected' });
                return;
            }
            const returnStatus = document.getElementById('returnStatus').value;

            Swal.fire({
                title: 'Processing...',
                text: 'Sending email notification to customer',
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            
            try {
                const response = await fetch(`/admin/orders/return/${currentReturnId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ returnStatus }),
                });
                const data = await response.json();
                if (data.success) {
                    const returnModal = document.getElementById('returnRequestModal');
                    const modalInstance = bootstrap.Modal.getInstance(returnModal);
                    modalInstance.hide();

                    returnModal.addEventListener('hidden.bs.modal', function hideListener() {
                        returnModal.removeEventListener('hidden.bs.modal', hideListener);
                        Swal.fire({
                            icon: returnStatus === 'approved' ? 'success' : 'info',
                            title: 'Return Request Processed',
                            text: `The return request has been ${returnStatus} successfully.`,
                        }).then(() => fetchOrders());
                    }, { once: true });

                } else throw new Error(data.message || 'Failed to process return request');
            } catch (error) {
                Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Server error' });
            }
        });
    }

    async function handleViewOrder() {
        const orderId = this.getAttribute('data-order-id');
        try {
            const response = await fetch(`/admin/orders/details/${orderId}`);
            if (!response.ok) throw new Error('Failed to fetch order details');
            const { success, order, customerStats } = await response.json();
            if (!success) throw new Error('Invalid response structure');

            document.getElementById('orderDetailsModalLabel').textContent = `Order #${order.orderId} Details`;
            document.getElementById('orderDetailsBody').innerHTML = `
                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between">
                                <h5 class="mb-0">Order #${order.orderId}</h5>
                                <span class="badge bg-${getStatusColorClass(order.status).split('-')[1]} text-dark">${order.status}</span>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p class="mb-1 text-muted">Ordered on</p>
                                        <p class="fw-medium">${new Date(order.createdAt).toLocaleString()}</p>
                                    </div>
                                    <div class="col-md-6">
                                        <p class="mb-1 text-muted">Payment method</p>
                                        <p class="fw-medium">${order.paymentMethod || 'N/A'}</p>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col-md-6">
                                        <p class="mb-1 text-muted">Shipping address</p>
                                        <address>
                                            ${order.address?.name || 'N/A'}<br>
                                            ${order.address?.addressLine || ''}<br>
                                            ${order.address?.landmark ? order.address.landmark + '<br>' : ''}
                                            ${order.address?.city || ''}, ${order.address?.pincode || ''}<br>
                                            ${order.address?.state || ''}, India<br>
                                            +91 ${order.address?.phone || 'N/A'}
                                        </address>
                                    </div>
                                    <div class="col-md-6">
                                        <p class="mb-1 text-muted">Billing address</p>
                                        <address>
                                            ${order.address?.name || 'N/A'}<br>
                                            ${order.address?.addressLine || ''}<br>
                                            ${order.address?.landmark ? order.address.landmark + '<br>' : ''}
                                            ${order.address?.city || ''}, ${order.address?.pincode || ''}<br>
                                            ${order.address?.state || ''}, India<br>
                                            +91 ${order.address?.phone || 'N/A'}
                                        </address>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Order Items</h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table mb-0">
                                        <thead class="bg-light">
                                            <tr>
                                                <th>Product</th>
                                                <th class="text-center">Quantity</th>
                                                <th class="text-end">Price</th>
                                                <th class="text-end">Total</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${order.orderedItems?.map(item => `
                                                <tr>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <div>
                                                                <h6 class="mb-0">${item.product?.productName || 'Unknown'}</h6>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td class="text-center">${item.quantity || 0}</td>
                                                    <td class="text-end">₹${item.price?.toLocaleString('en-IN') || '0'}</td>
                                                    <td class="text-end">₹${((item.quantity || 0) * (item.price || 0)).toLocaleString('en-IN')}</td>
                                                </tr>
                                            `).join('') || '<tr><td colspan="4">No items</td></tr>'}
                                        </tbody>
                                        <tfoot class="bg-light">
                                            <tr>
                                                <td colspan="3" class="text-end fw-medium">Subtotal</td>
                                                <td class="text-end">₹${order.totalPrice?.toLocaleString('en-IN') || '0'}</td>
                                            </tr>
                                            <tr>
                                                <td colspan="3" class="text-end fw-medium">Shipping</td>
                                                <td class="text-end">₹${order.shipping?.toLocaleString('en-IN') || '0'}</td>
                                            </tr>
                                             <tr>
                                                <td colspan="3" class="text-end fw-medium">Coupon</td>
                                                <td class="text-end">₹${order.coupon?.toLocaleString('en-IN') || '0'}</td>
                                            </tr>
                                            <tr>
                                                <td colspan="3" class="text-end fw-medium">Tax (GST 18%)</td>
                                                <td class="text-end">₹${order.tax?.toLocaleString('en-IN') || '0'}</td>
                                            </tr>
                                            <tr>
                                                <td colspan="3" class="text-end fw-bold">Total</td>
                                                <td class="text-end fw-bold">₹${order.finalAmount?.toLocaleString('en-IN') || '0'}</td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Customer Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="mb-0">${order.userId?.username || 'Unknown'}</h6>
                                    <p class="text-muted mb-0">Customer since ${order.userId?.createdAt ? new Date(order.userId.createdAt).toLocaleDateString() : 'N/A'}</p>
                                </div>
                                <div class="mb-3">
                                    <p class="mb-1"><i class="fas fa-envelope me-2 text-muted"></i> ${order.userId?.email || 'N/A'}</p>
                                    <p class="mb-1"><i class="fas fa-phone me-2 text-muted"></i> +91 ${order.userId?.phone || order.address?.phone || 'N/A'}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            const orderDetailsModal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
            orderDetailsModal.show();
        } catch (error) {
            Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Failed to load order details' });
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const filterForm = document.getElementById('orderFilterForm');
        filterForm.addEventListener('submit', (e) => {
            e.preventDefault();
            fetchOrders();
        });

        document.querySelectorAll('#orderStatusFilter, #paymentStatusFilter, #dateFilter, #searchInput').forEach(input => {
            input.addEventListener('change', () => fetchOrders());
        });

        const clearFiltersBtn = document.getElementById('clearFilters');
        if (clearFiltersBtn) {
            clearFiltersBtn.addEventListener('click', () => {
                document.getElementById('searchInput').value = '';
                document.getElementById('orderStatusFilter').value = 'All';
                document.getElementById('paymentStatusFilter').value = 'All';
                document.getElementById('dateFilter').value = 'All';
                fetchOrders();
            });
        }

        fetchOrders();
    });
</script>

<%- include("../../views/partial/admin/footer") %>