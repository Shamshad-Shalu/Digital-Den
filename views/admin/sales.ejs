<%- include("../../views/partial/admin/header") %>

    <style>
        .cursor-pointer {
            cursor: pointer;
        }

        .date-header {
            border-left: 3px solid #dee2e6;
        }

        .order-id-link {
            max-width: 150px;
            display: inline-block;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .avatar-sm {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .avatar-lg {
            width: 56px;
            height: 56px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }

        .timeline-dot {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            margin-top: 4px;
        }

        .stats-card {
            transition: transform 0.3s;
        }

        .stats-card:hover {
            transform: translateY(-5px);
        }

        .stats-card .border-start {
            border-left-width: 4px !important;
        }

        /* Custom date range styles */
        .custom-date {
            transition: all 0.3s ease;
        }

        /* Table date header styles */
        .table-light .badge {
            font-size: 0.8rem;
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            .stats-card .card-body {
                padding: 1rem;
            }

        }

        /* Revised Filter Styles - More distinct separate section */
        .filter-section {
            border-radius: 8px;
            padding: 16px;
            border: 1px solid var(--bs-border-color);
            background: transparent;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
            position: relative;
        }

        /* Filter header styling */
        .filter-header {
            border-bottom: 1px solid var(--bs-border-color);
            padding-bottom: 12px;
            margin-bottom: 16px;
        }

        .filter-header h6 {
            font-size: 16px;
            font-weight: 600;
        }

        /* Filter labels - slightly bigger */
        .filter-label {
            display: block;
            font-size: 13px;
            font-weight: 500;
            margin-bottom: 5px;
            opacity: 0.8;
        }

        /* Form controls - slightly taller */
        .filter-control {
            font-size: 14px;
            border-radius: 4px;
            height: calc(1.8em + 0.75rem + 2px);
        }

        /* Active filter indication */
        .filter-control:not([value="all"]):not([value=""]):not([value="weekly"]) {
            border-left: 3px solid var(--bs-primary);
        }

        /* Clear button - more visible */
        #resetFiltersBtn {
            border-width: 1px;
            font-size: 13px;
            padding: 0.25rem 0.7rem;
        }

        /* Search container - smaller */
        .search-container {
            position: relative;
            margin-bottom: 16px;
        }

        #searchInput {
            height: 36px;
            font-size: 14px;
        }

        #clearSearchBtn {
            display: none;
        }

        #clearSearchBtn.active {
            display: block;
        }

        /* Custom date display logic */
        .custom-date-field input.d-none {
            display: none !important;
        }

        .custom-date-field input:not(.d-none) {
            display: block;
        }

        /* For dark mode compatibility */
        @media (prefers-color-scheme: dark) {
            .filter-section {
                background-color: rgba(255, 255, 255, 0.05);
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            }

            .input-group-text {
                background-color: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.2);
            }

            .filter-header {
                border-bottom-color: rgba(255, 255, 255, 0.1);
            }
        }

        /* Responsive adjustments */
        @media (max-width: 767px) {
            .filter-section {
                padding: 12px;
            }

            .filter-label {
                font-size: 12px;
            }

            .row.g-3 {
                --bs-gutter-y: 0.75rem;
            }
        }
    </style>

    <!-- Sales Report Section -->
    <div class="container-fluid py-4">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3">Sales Reports</h1>
                <p class="text-muted">View and analyze your sales data</p>
            </div>
            <div>
                <!-- <button class="btn btn-primary" id="exportReportBtn">
                    <i class="fas fa-file-export me-2"></i>Export Report
                </button> -->
            </div>
        </div>

        <div class="row g-4 mb-4">
            <!-- Gross Sales -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-success overflow-auto">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-success bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-chart-line text-success fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Gross Sales</p>
                            <h3 class="mb-0 fw-bold" id="grossSale">₹<%= grossSale.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Cancelled Orders -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-danger">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-danger bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-ban text-danger fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Cancelled Orders</p>
                            <h3 class="mb-0 fw-bold" id="cancelOrders">₹<%= cancelOrders.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Returns -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-warning">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-warning bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-undo-alt text-warning fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Returns</p>
                            <h3 class="mb-0 fw-bold" id="totalReturns" >₹<%= totalReturns.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Coupons Redeemed -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-info">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-info bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-ticket-alt text-info fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Coupons Redeemed</p>
                            <h3 class="mb-0 fw-bold" id="totalCoupon">₹<%= totalCoupon.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Discounts -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-primary">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-primary bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-tag text-primary fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Discounts</p>
                            <h3 class="mb-0 fw-bold" id="totalDiscount">₹<%= totalDiscount.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Net Sales -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-success">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-success bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-rupee-sign text-success fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Net Sales</p>
                            <h3 class="mb-0 fw-bold" id="netSale">₹<%= netSale.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Total Orders -->
            <div class="col-md-3">
                <div class="card stats-card border-start border-4 border-primary">
                    <div class="card-body d-flex align-items-center">
                        <div class="bg-primary bg-opacity-10 p-3 rounded-circle me-3">
                            <i class="fas fa-shopping-cart text-primary fs-4"></i>
                        </div>
                        <div>
                            <p class="text-muted small mb-0">Total Orders</p>
                            <h3 class="mb-0 fw-bold" id="totalOrders" ><%= totalOrders %></h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Revised Filter Section -->
        <div class="filter-section mb-3">
            <form action="" id="saleFilterForm">
                <div class="filter-header d-flex justify-content-between align-items-center mb-3">
                    <h6 class="fw-bold mb-0">Filter Sales</h6>
                </div>

                <div class="filter-content">
                    <div class="row g-3">
                        <!-- Status Filter -->
                        <div class="col-md-6">
                            <label class="filter-label opacity-0">search </label>
                            <div class="input-group mt-2">
                                <span class="input-group-text bg-transparent border-end-0">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control border-start-0 ps-0"
                                    placeholder="Search offers..." id="searchInput" />
                                <button class="btn btn-secondary" type="button" id="clearFilters">
                                    <i class="fas fa-times me-1"></i>Clear Filters
                                </button>
                            </div>
                        </div>

                        <div class="col-md-3 col-6">
                            <label class="filter-label">Status</label>
                            <select class="form-select filter-control" id="statusFilter">
                                <option value="All">All Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Processing">Processing</option>
                                <option value="Shipped">Shipped</option>
                                <option value="Out for Delivery">Out for Delivery</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Return Request">Return Request</option>
                                <option value="Returned">Returned</option>
                            </select>
                        </div>

                        <!-- Payment Method Filter -->
                        <div class="col-md-3 col-6">
                            <label class="filter-label">Payment Method</label>
                            <select class="form-select filter-control" id="paymentFilter">
                                <option value="All">All Payments</option>
                                <option value="COD">Cash on Delivery</option>
                                <option value="Online">Razorpay</option>
                                <option value="wallet">Wallet</option>
                            </select>
                        </div>

                        <!-- Price Range Filter -->
                        <div class="col-md-4 col-12">
                            <label class="filter-label">Price Range</label>
                            <div class="input-group">
                                <input type="number" class="form-control filter-control" placeholder="Min"
                                    id="minPrice" />
                                <span class="input-group-text">to</span>
                                <input type="number" class="form-control filter-control" placeholder="Max"
                                    id="maxPrice" />
                            </div>
                        </div>

                        <!-- Date Range Filter -->
                        <div class="col-md-8 col-12">
                            <label class="filter-label">Date Range</label>
                            <div class="row g-2">
                                <div class="col-md-4">
                                    <select class="form-select filter-control" id="dateRangeSelect">
                                        <option value="All">All Time</option>
                                        <option value="today">Today</option>
                                        <option value="yesterday">Yesterday</option>
                                        <option value="weekly">This Week</option>
                                        <option value="monthly">This Month</option>
                                        <option value="custom">Custom Range</option>
                                    </select>
                                </div>
                                <div class="col-md-4 custom-date-field">
                                    <input type="date" class="form-control filter-control d-none" id="startDate"
                                        placeholder="From" />
                                </div>
                                <div class="col-md-4 custom-date-field">
                                    <input type="date" class="form-control filter-control d-none" id="endDate"
                                        placeholder="To" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <div class="card shadow-sm">
            <div class="card-header bg-transparent d-flex justify-content-between align-items-center py-3">
                <h5 class="mb-0">Sales Details</h5>
                <div>
                    <button class="btn btn-sm btn-outline-primary me-2" id="downloadPdf">
                        <i class="fas fa-file-pdf me-1"></i>PDF
                    </button>
                    <button class="btn btn-sm btn-outline-success" id="downloadExcel">
                         <i class="fas fa-file-excel me-1"></i>Excel
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table align-middle mb-0">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Order ID</th>
                                <th>Amount</th>
                                <th>Discount</th>
                                <th>Coupon</th>
                                <th>Tax</th>
                                <th>FinalAmount</th>
                                <th>Return/Cancelled</th>
                                <th>Revoked Coupon</th>
                                <th>Date</th>
                                <th width="70">Payment Method</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                            <!-- Dynamically populated  -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center p-3 " id="paginationSection">
                    <!-- Dynamically populated  -->
                </div>

            </div>
        </div>

        <script>

            async function fetchSales(page = 1 ) {
                const search = document.getElementById("searchInput").value;
                const status = document.getElementById('statusFilter').value;
                const paymentMethod = document.getElementById('paymentFilter').value;
                const minPrice = document.getElementById("minPrice").value;
                const maxPrice = document.getElementById("maxPrice").value;
                const dateRange = document.getElementById('dateRangeSelect').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                const queryParams = new URLSearchParams({
                    page,
                    search,
                    paymentMethod,
                    status,
                    minPrice,
                    maxPrice,
                    dateRange,
                    startDate,
                    endDate,
                }).toString();

                try {
                    const response = await fetch(`/admin/sales?${queryParams}`, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    });

                    if (response.status === 401 || response.status === 403) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Unauthorized',
                            text: 'Please log in to continue',
                        }).then(() => {
                            window.location.href = '/admin/login';
                        });
                        return;
                    };
                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to fetch sales');
                    }

                    const tableBody = document.getElementById("tableBody");
                    tableBody.innerHTML = '';

                    if (data.sales?.length > 0) {
                        data.sales.forEach((sale, index) => {
                            const row = `
                    <tr class="fade-in">
                      <td>${(data.page - 1) * data.limit + index + 1}</td>
                      <td>${sale.orderId || 'Unknown'}</td>
                      <td>₹${sale.subtotal.toFixed(2)}</td>
                      <td class="text-danger">₹${(sale.discount || 0).toFixed(2)}</td>
                      <td>₹${(sale.couponDiscount || 0).toFixed(2)}</td>
                      <td class="ml-2" >₹${(sale.tax || 0).toFixed(2)}</td>
                      <td class="fw-bold">₹${(sale.total || 0).toFixed(2)}</td>
                      <td class="ml-2" >₹${(sale.refundAmount || 0).toFixed(2)}</td>    
                      <td class="ml-2" >₹${(sale.revokedCoupon || 0).toFixed(2)}</td>
                      <td><span class="text-muted">${sale.orderDate ? new Date(sale.orderDate).toLocaleDateString("en-US", { month: "long", day: "2-digit", year: "numeric" }) : 'N/A'}</span></td>
                      <td><span class="badge bg-warning text-dark">${sale.paymentMethod || 'Unknown'}</span></td>
                      <td><span class="badge bg-${getStatusClass(sale.status)} ">${sale.status || 'Unknown'} </span></td>           
                    </tr>
                    `;
                            tableBody.insertAdjacentHTML('beforeend', row);
                        });
                        function getStatusClass(status) {
                            if (!status) return 'secondary';
                            switch (status) {
                                case 'Pending': return 'warning';
                                case 'Processing': return 'primary';
                                case 'Shipped': return 'info';
                                case 'Out for Delivery': return 'primary';
                                case 'Delivered': return 'success';
                                case 'Cancelled': return 'danger';
                                case 'Return Request': return 'warning';
                                case 'Returned': return 'secondary';
                                default: return 'secondary';
                            }
                        }

                    } else {
                        tableBody.innerHTML = `
                    <tr>
                        <td colspan="11" class="text-center py-4">
                            <div class="d-flex flex-column align-items-center justify-content-center gap-3">
                                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="text-muted">
                                    <rect width="8" height="4" x="8" y="2" rx="1" ry="1" />
                                    <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
                                    <path d="M12 11v4" />
                                    <path d="M12 17h.01" />
                                </svg>
                                <p class="fs-5 fw-medium text-muted">No items found</p>
                                <p class="text-muted">Try adjusting your search or filter to find what you're looking for.</p>
                            </div>
                        </td>
                    </tr>
                `;
                    }

                    const paginationSection = document.getElementById("paginationSection");
                    paginationSection.innerHTML = '';

                    if (data.count > 0) {
                        const totalPages = Math.ceil(data.count / data.limit);
                        const maxPagesToShow = 5;
                        const startPage = Math.max(1, data.page - Math.floor(maxPagesToShow / 2));
                        const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

                        const paginationHTML = `
                                <div class="text-muted">
                                    Showing <span class="fw-bold">${(data.page - 1) * data.limit + 1}</span>
                                    to <span class="fw-bold">${Math.min(data.page * data.limit, data.count)}</span> 
                                    of <span class="fw-bold">${data.count}</span> Orders
                                </div>
                                <nav aria-label="Page navigation">
                                    <ul class="pagination mb-0">
                                        <li class="page-item ${data.page <= 1 ? 'disabled' : ''}">
                                            <a class="page-link" href="#" data-page="${data.page - 1}" aria-label="Previous">
                                                <i class="fas fa-chevron-left"></i>
                                            </a>
                                        </li>
                                        ${Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i).map(i => `
                                            <li class="page-item ${data.page === i ? 'active' : ''}">
                                                <a class="page-link" href="#" data-page="${i}">${i}</a>
                                            </li>
                                        `).join('')}
                                        <li class="page-item ${data.page >= totalPages ? 'disabled' : ''}">
                                            <a class="page-link" href="#" data-page="${data.page + 1}" aria-label="Next">
                                                <i class="fas fa-chevron-right"></i>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                             `;

                        paginationSection.innerHTML = paginationHTML;

                        document.querySelectorAll('.pagination a[data-page]').forEach(link => {
                            link.addEventListener('click', (e) => {
                                e.preventDefault();
                                const page = parseInt(link.getAttribute('data-page'));
                                if (page > 0 && page <= totalPages) fetchSales(page);
                            });
                        });
                    }


                    // update the items 
                    function updateElement(id, value) {
                        document.getElementById(id).innerHTML =  "₹" + Number(value).toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2});
                    }

                    const currencyIds = ["cancelOrders", "grossSale", "totalReturns", "totalCoupon", "totalDiscount", "netSale"];
                    currencyIds.forEach(id => {
                        updateElement(id, data[id])
                    }); 
                    document.getElementById("totalOrders").innerHTML = data.totalOrders;


                } catch (error) {
                    console.error('Error fetching sales:', error);
                    Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Failed to load sales' });
                }
            }

            document.addEventListener("DOMContentLoaded", () => {
                const filterForm = document.getElementById("saleFilterForm");
                const clearFiltersBtn = document.getElementById('clearFilters');

                filterForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    fetchSales();
                    checkFilters();

                });

                // All filter change listeners
                document.querySelectorAll('#statusFilter, #paymentFilter, #dateRangeSelect').forEach(input => {
                    input.addEventListener('change', () => {
                        fetchSales(1);
                        checkFilters();
                    });
                });

                // Handle date range selection
                document.getElementById('dateRangeSelect').addEventListener('change', function () {
                    const customDateSelected = this.value === 'custom';

                    // Show/hide date inputs based on selection
                    const startDateField = document.getElementById('startDate');
                    const endDateField = document.getElementById('endDate');

                    startDateField.classList.toggle('d-none', !customDateSelected);
                    endDateField.classList.toggle('d-none', !customDateSelected);

                    // Clear dates if not using custom date range
                    if (!customDateSelected) {
                        startDateField.value = '';
                        endDateField.value = '';
                    }

                    fetchSales();
                    checkFilters();
                });

                // Date inputs
                ['startDate', 'endDate'].forEach(id => {
                    const dateInput = document.getElementById(id);
                    if (dateInput) {
                        dateInput.addEventListener("change", () => {
                            fetchSales();
                            checkFilters();
                        });
                    }
                });

                // Handle date range selection
                ['minPrice', 'maxPrice', 'searchInput'].forEach(id => {
                    const priceInput = document.getElementById(id);
                    if (priceInput) {
                        priceInput.addEventListener("input", () => {
                            fetchSales();
                            checkFilters();
                        });
                    }
                });

                if (clearFiltersBtn) {
                    clearFiltersBtn.addEventListener('click', () => {
                        document.getElementById('searchInput').value = '';
                        document.getElementById('paymentFilter').value = 'All';
                        document.getElementById('statusFilter').value = 'All';
                        document.getElementById('minPrice').value = '';
                        document.getElementById('maxPrice').value = '';
                        document.getElementById('dateRangeSelect').value = 'all';
                        document.getElementById('startDate').value = '';
                        document.getElementById('endDate').value = '';

                        // Hide date fields
                        document.getElementById('startDate').classList.add('d-none');
                        document.getElementById('endDate').classList.add('d-none');
                        
                        fetchSales();
                        checkFilters();
                        
                    });
                }

                function checkFilters() {
                    const filtersActive =
                        document.getElementById('searchInput').value !== '' ||
                        document.getElementById('paymentFilter').value !== 'All' ||
                        document.getElementById('statusFilter').value !== 'All' ||
                        document.getElementById('minPrice').value !== '' ||
                        document.getElementById('maxPrice').value !== '' ||
                        document.getElementById('dateRangeSelect').value !== 'All' ||
                        document.getElementById('startDate').value !== '' ||
                        document.getElementById('endDate').value !== '';

                    const clearFiltersBtn = document.getElementById('clearFilters');
                    if (clearFiltersBtn) {
                        if (filtersActive) {
                            clearFiltersBtn.classList.remove('d-none');
                        } else {
                            clearFiltersBtn.classList.add('d-none');
                        }
                    }
                }

                // Initialize
                fetchSales();
                checkFilters();

                 // PDF functionality
                document.getElementById('downloadPdf').addEventListener('click', async () => {
                    try {
                        const reportData = await fetchReportData();
                        generatePDF(reportData);
                    } catch (error) {
                        console.error('Error generating PDF:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Export Failed',
                            text: 'Failed to generate PDF report. Please try again.'
                        });
                    }
                });

                // Excel Export functionality
                document.getElementById('downloadExcel').addEventListener('click', async () => {
                    try {
                        const reportData = await fetchReportData();
                        generateExcel(reportData);
                    } catch (error) {
                        console.error('Error generating Excel:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Export Failed',
                            text: 'Failed to generate Excel report. Please try again.'
                        });
                    }
                });


                async function fetchReportData() {
                    const search = document.getElementById("searchInput").value;
                    const status = document.getElementById('statusFilter').value;
                    const paymentMethod = document.getElementById('paymentFilter').value;
                    const minPrice = document.getElementById("minPrice").value;
                    const maxPrice = document.getElementById("maxPrice").value;
                    const dateRange = document.getElementById('dateRangeSelect').value;
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;

                    // Create query parameters
                    const queryParams = new URLSearchParams({
                        search,
                        paymentMethod,
                        status,
                        minPrice,
                        maxPrice,
                        dateRange,
                        startDate,
                        endDate,
                        export: 'true',
                        limit: 1000 
                    }).toString();
                    
                    // Fetch data from server
                    const response = await fetch(`/admin/sales/export?${queryParams}`, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to fetch sales data for export');
                    }

                    return await response.json();
                }

               
                function generatePDF(data) {
                    // Create jsPDF instance
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
                    
                    //  title
                    doc.setFontSize(16);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Digital Den, Sales Report', 148.5, 15, { align: 'center' });
                    
                    //  date range
                    const dateRangeText = getDateRangeText(data);
                    doc.setFontSize(10);
                    doc.setFont('helvetica', 'italic');
                    doc.text(`Report Period: ${dateRangeText}`, 148.5, 25, { align: 'center' });
                    
                    // filters
                    const filterText = getFilterText();
                    doc.setFontSize(10);
                    doc.setFont('helvetica', 'italic');
                    doc.text(`Filters Applied: ${filterText || 'None'}`, 148.5, 32, { align: 'center' });
                    
                    // sales details table
                    const headers = [
                        'Order ID',
                        'Amount',
                        'Discount',
                        'Coupon',
                        'Final Amount',
                        'Return/Cancelled',
                        'Revoked Coupon',
                        'Date',
                        'Status'
                    ];
                    const tableData = data.sales.map(sale => [
                        sale.orderId || 'Unknown',
                        formatCurrency(sale.subtotal),
                        formatCurrency(sale.discount || 0),
                        formatCurrency(sale.couponDiscount || 0),
                        formatCurrency(sale.total || 0),
                        formatCurrency(sale.refundAmount || 0),
                        formatCurrency(sale.revokedCoupon || 0), 
                        new Date(sale.orderDate).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' }),
                        sale.status || 'Unknown'
                    ]);
                    
                    // Calculate totals
                    const sumSubtotal = data.sales.reduce((sum, sale) => sum + (sale.subtotal || 0), 0);
                    const sumDiscount = data.sales.reduce((sum, sale) => sum + (sale.discount || 0), 0);
                    const sumCoupon = data.sales.reduce((sum, sale) => sum + (sale.couponDiscount || 0), 0);
                    const sumTotal = data.sales.reduce((sum, sale) => sum + (sale.total || 0), 0);
                    const sumRefund = data.sales.reduce((sum, sale) => sum + (sale.refundAmount || 0), 0);
                    const sumRevokedCoupon = data.sales.reduce((sum, sale) => sum + (sale.revokedCoupon || 0), 0);
                    
                    // Add totals row
                    tableData.push([
                        'Totals:',
                        formatCurrency(sumSubtotal),
                        formatCurrency(sumDiscount),
                        formatCurrency(sumCoupon),
                        formatCurrency(sumTotal),
                        formatCurrency(sumRefund),
                        formatCurrency(sumRevokedCoupon),
                        '',
                        `Total Orders: ${data.totalOrders}`
                    ]);
                    
                    // Render table
                    doc.autoTable({
                        startY: 40,
                        head: [headers],
                        body: tableData,
                        theme: 'grid',
                        headStyles: {
                            fillColor: [66, 66, 66], // Gray background
                            textColor: [255, 255, 255], // White text
                            fontStyle: 'bold',
                            fontSize: 9 // Slightly smaller for a compact look
                        },
                        styles: {
                            fontSize: 8, // Reduced font size for better fit and readability
                            cellPadding: 4, // Increased padding for better spacing
                            lineColor: [0, 0, 0],
                            lineWidth: 0.2
                        },
                        columnStyles: {
                            0: { cellWidth: 40, halign: 'left' },   // Order ID (wider for long IDs)
                            1: { cellWidth: 25, halign: 'right' },  // Amount (right-aligned)
                            2: { cellWidth: 25, halign: 'right' },  // Discount (right-aligned)
                            3: { cellWidth: 25, halign: 'right' },  // Coupon (right-aligned)
                            4: { cellWidth: 25, halign: 'right' },  // Final Amount (right-aligned)
                            5: { cellWidth: 30, halign: 'right' },  // Return/Cancelled (right-aligned)
                            6: { cellWidth: 30, halign: 'right' },  // Revoked Coupon (right-aligned)
                            7: { cellWidth: 25, halign: 'center' }, // Date (centered)
                            8: { cellWidth: 25, halign: 'center' }  // Status (centered)
                        },
                        margin: { left: 14, right: 14 },
                        didParseCell: (data) => {
                            if (data.row.index === tableData.length - 1) {
                                data.cell.styles.fontStyle = 'bold';
                                // Center the "Total Orders" value in the Status column
                                if (data.column.index === 8) {
                                    data.cell.styles.halign = 'center';
                                }
                            }
                        }
                    });
                    
                    // Add page numbers
                    const pageCount = doc.internal.getNumberOfPages();
                    for (let i = 1; i <= pageCount; i++) {
                        doc.setPage(i);
                        doc.setFontSize(8);
                        doc.setFont('helvetica', 'normal');
                        doc.text(`Page ${i} of ${pageCount}`, 280, 200, { align: 'right' });
                    }
                    

                    doc.save(`Sales_Report_${getFormattedDate()}.pdf`);
                }
               // Generate Excel report
                function generateExcel(data) {
                    // Create a new workbook and worksheet
                    const workbook = XLSX.utils.book_new();
                    const worksheetData = [];

                    // Add title
                    worksheetData.push(['Sales Report']);
                    
                    // Add date range
                    const dateRangeText = getDateRangeText(data); // Pass data to get earliest/latest dates
                    worksheetData.push(['Report Period:', dateRangeText, '', '', '', '', '', '', '', '', '']);
                    
                    // Add filters
                    const filterText = getFilterText();
                    worksheetData.push(['Filters Applied:', filterText || 'None', '', '', '', '', '', '', '', '', '']);
                    
                    // Add blank row for spacing
                    worksheetData.push(['']);
                    
                    // Add headers
                    const headers = ['#', 'Order ID', 'Date', 'Payment Method', 'Amount', 'Discount', 'Coupon', 'Tax', 'Final Amount', 'Refund', 'Status'];
                    worksheetData.push(headers);
                    
                    // Add sales data
                    const salesData = data.sales.map((sale, index) => [
                        index + 1,
                        sale.orderId || 'Unknown',
                        new Date(sale.orderDate).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' }),
                        sale.paymentMethod || 'Unknown',
                        formatCurrency(sale.subtotal),
                        formatCurrency(sale.discount || 0),
                        formatCurrency(sale.couponDiscount || 0),
                        formatCurrency(sale.tax || 0),
                        formatCurrency(sale.total || 0),
                        formatCurrency(sale.refundAmount || 0),
                        sale.status || 'Unknown'
                    ]);
                    
                    salesData.forEach(row => worksheetData.push(row));
                    
                    // Add totals row
                    const sumSubtotal = data.sales.reduce((sum, sale) => sum + (sale.subtotal || 0), 0);
                    const sumDiscount = data.sales.reduce((sum, sale) => sum + (sale.discount || 0), 0);
                    const sumCoupon = data.sales.reduce((sum, sale) => sum + (sale.couponDiscount || 0), 0);
                    const sumTax = data.sales.reduce((sum, sale) => sum + (sale.tax || 0), 0);
                    const sumTotal = data.sales.reduce((sum, sale) => sum + (sale.total || 0), 0);
                    const sumRefund = data.sales.reduce((sum, sale) => sum + (sale.refundAmount || 0), 0);
                    
                    worksheetData.push(['']);
                    worksheetData.push([
                        'Totals:',
                        '',
                        '',
                        '',
                        formatCurrency(sumSubtotal),
                        formatCurrency(sumDiscount),
                        formatCurrency(sumCoupon),
                        formatCurrency(sumTax),
                        formatCurrency(sumTotal),
                        formatCurrency(sumRefund),
                        `Total Orders: ${data.totalOrders}`
                    ]);
                    
                    // Create worksheet
                    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
                    
                    // Set column widths
                    worksheet['!cols'] = [
                        { wch: 5 },  // #
                        { wch: 20 }, // Order ID
                        { wch: 15 }, // Date
                        { wch: 15 }, // Payment Method
                        { wch: 12 }, // Amount
                        { wch: 12 }, // Discount
                        { wch: 12 }, // Coupon
                        { wch: 12 }, // Tax
                        { wch: 12 }, // Final Amount
                        { wch: 12 }, // Refund
                        { wch: 15 }  // Status
                    ];
                    
                    // Apply borders and styling
                    const range = XLSX.utils.decode_range(worksheet['!ref']);
                    for (let row = range.s.r; row <= range.e.r; row++) {
                        for (let col = range.s.c; col <= range.e.c; col++) {
                            const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
                            if (!worksheet[cellAddress]) continue;
                            worksheet[cellAddress].s = {
                                border: {
                                    top: { style: 'thin' },
                                    bottom: { style: 'thin' },
                                    left: { style: 'thin' },
                                    right: { style: 'thin' }
                                },
                                font: row === 0 ? { bold: true, sz: 16 } : // Title
                                    row === 4 ? { bold: true } : // Headers
                                    row === range.e.r ? { bold: true } : {}, // Totals
                                alignment: { horizontal: 'left' }
                            };
                        }
                    }
                    
                    // Merge title cell
                    worksheet['!merges'] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 10 } }];
                    
                    // Add worksheet to workbook
                    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');
                    
                    // Generate the Excel file
                    XLSX.writeFile(workbook, `Sales_Report_${getFormattedDate()}.xlsx`);
                }
                // Helper function to get formatted date for filenames
                function getFormattedDate() {
                    const date = new Date();
                    return date.toISOString().split('T')[0];
                }
                
                // Helper function to get date range text
                function getDateRangeText(data) {
                    const dateRange = document.getElementById('dateRangeSelect').value;
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    const now = new Date();
                    
                    let fromDate, toDate;
                    
                    switch (dateRange) {
                        case 'today':
                            fromDate = toDate = new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            break;
                        case 'yesterday':
                            const yesterday = new Date(now.setDate(now.getDate() - 1));
                            fromDate = toDate = yesterday.toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            break;
                        case 'weekly':
                            const weekStart = new Date(now.setDate(now.getDate() - now.getDay()));
                            fromDate = weekStart.toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            toDate = new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            break;
                        case 'monthly':
                            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
                            fromDate = monthStart.toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            toDate = new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            break;
                        case 'custom':
                            if (startDate && endDate) {
                                fromDate = new Date(startDate).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                                toDate = new Date(endDate).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            } else if (startDate) {
                                fromDate = new Date(startDate).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                                toDate = new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            } else if (endDate) {
                                fromDate = new Date(data.sales.reduce((min, sale) => Math.min(min, new Date(sale.orderDate).getTime()), Infinity)).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                                toDate = new Date(endDate).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            }
                            break;
                        default: // 'all' or any other value
                            fromDate = new Date(data.sales.reduce((min, sale) => Math.min(min, new Date(sale.orderDate).getTime()), Infinity)).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            toDate = new Date(data.sales.reduce((max, sale) => Math.max(max, new Date(sale.orderDate).getTime()), -Infinity)).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata' });
                            break;
                    }
                    
                    return fromDate && toDate ? `${fromDate} - ${toDate}` : 'Unknown Range';
                }
                // Helper function to get filter text
                function getFilterText() {
                    const filters = [];
                    
                    const status = document.getElementById('statusFilter').value;
                    if (status && status !== 'All') filters.push(`Status: ${status}`);
                    
                    const paymentMethod = document.getElementById('paymentFilter').value;
                    if (paymentMethod && paymentMethod !== 'All') filters.push(`Payment Method: ${paymentMethod}`);
                    
                    const minPrice = document.getElementById('minPrice').value;
                    const maxPrice = document.getElementById('maxPrice').value;
                    if (minPrice && maxPrice) {
                        filters.push(`Price Range: ₹${Number(minPrice).toLocaleString('en-IN')} - ₹${Number(maxPrice).toLocaleString('en-IN')}`);
                    } else if (minPrice) {
                        filters.push(`Min Price: ₹${Number(minPrice).toLocaleString('en-IN')}`);
                    } else if (maxPrice) {
                        filters.push(`Max Price: ₹${Number(maxPrice).toLocaleString('en-IN')}`);
                    }
                    
                    const search = document.getElementById('searchInput').value;
                    if (search) filters.push(`Search: "${search}"`);
                    
                    return filters.join(' | ');
                }

            })

            //  format currency 
            function formatCurrency(value) {
                return '₹' + Number(value).toLocaleString('en-IN', {
                    minimumFractionDigits: 2, // show 2 decimal 
                    maximumFractionDigits: 2  // no more than 2 decimal 
                });
            }
       
        </script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.29/jspdf.plugin.autotable.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

        <%- include("../../views/partial/admin/footer") %>