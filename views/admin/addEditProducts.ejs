<%- include("../partial/admin/header") %>
<link rel="stylesheet" href="/style/admin/addProduct.css">
<link rel="stylesheet" href="/public/admin/category.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<!-- Add/Edit Product Section -->
<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3"><%= product ? 'Edit Product' : 'Add New Product' %></h1>
            <p class="text-muted"><%= product ? 'Update product details' : 'Add a new product to your inventory' %></p>
        </div>
        <div>
            <a href="/admin/products" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i>Back to Products
            </a>
        </div>
    </div>
    <!-- Add/Edit Form -->
    <div class="card">
        <div class="card-body">
            <form id="ProductForm" enctype="multipart/form-data">
                <input type="hidden" id="productId" name="productId" value="<%= product ? product._id : '' %>">
                <div class="row g-4">
                    <div class="col-lg-8">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Basic Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="productName" value="<%= product ? product.productName : '' %>" name="productName">
                                    <div class="invalid-feedback"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description <span class="text-danger">*</span></label>
                                    <textarea class="form-control" id="description" name="description" rows="4"><%= product ? product.description : '' %></textarea>
                                    <div class="invalid-feedback"></div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="category" class="form-label">Category <span class="text-danger">*</span></label>
                                        <select class="form-select" id="category" name="category">
                                            <option value="" selected disabled>Select Category</option>
                                            <% if(locals.categories && categories.length > 0) { %>
                                                <% categories.forEach(category => { %>
                                                    <option value="<%= category._id %>" <%= product && product.category && product.category._id.toString() === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
                                                <% }); %>
                                            <% } %>
                                        </select>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="brand" class="form-label">Brand <span class="text-danger">*</span></label>
                                        <select class="form-select" id="brand" name="brand">
                                            <option value="" selected disabled>Select Brand</option>
                                            <% if(locals.brands && brands.length > 0) { %>
                                                <% brands.forEach(brand => { %>
                                                    <option value="<%= brand._id %>" <%= product && product.brand && product.brand._id.toString() === brand._id.toString() ? 'selected' : '' %>><%= brand.brandName %></option>
                                                <% }); %>
                                            <% } %>
                                        </select>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="status" class="form-label">Status <span class="text-danger">*</span></label>
                                        <select class="form-select" id="status" name="status">
                                            <option value="Available" <%= product && product.status === 'Available' ? 'selected' : '' %>>Available</option>
                                            <option value="out of stock" <%= product && product.status === 'out of stock' ? 'selected' : '' %>>Out of Stock</option>
                                        </select>
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Price & Inventory -->
                    <div class="col-lg-4">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Price & Inventory</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="regularPrice" class="form-label">Regular Price <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input type="number" class="form-control" id="regularPrice" name="regularPrice" min="0" step="1" value="<%= product ? product.regularPrice : '' %>">
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="salePrice" class="form-label">Sale Price <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <span class="input-group-text">₹</span>
                                        <input type="number" class="form-control" id="salePrice" name="salePrice" min="0" step="1" value="<%= product ? product.salePrice : '' %>">
                                        <div class="invalid-feedback"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="quantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                                    <input type="number" class="form-control" id="quantity" name="quantity" min="0" value="<%= product ? product.quantity : '' %>">
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Product Specifications -->
                    <div class="col-lg-12">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Product Specifications</h5>
                                <small class="text-muted">Add key specifications for the product (e.g., Processor, RAM, Battery Life)</small>
                            </div>
                            <div class="card-body">
                                <div id="specifications-container">
                                    <% if(product && product.specifications && product.specifications.length > 0) { %>
                                        <% product.specifications.forEach((spec, index) => { %>
                                            <div class="specification-entry mb-3" data-index="<%= index %>">
                                                <div class="row g-3 align-items-end">
                                                    <div class="col-md-5">
                                                        <label class="form-label">Specification Name</label>
                                                        <input type="text" class="form-control spec-name" name="specifications[<%= index %>][name]" value="<%= spec.name %>" placeholder="e.g., Processor">
                                                        <div class="invalid-feedback">Specification name is required.</div>
                                                    </div>
                                                    <div class="col-md-5">
                                                        <label class="form-label">Value</label>
                                                        <input type="text" class="form-control spec-value" name="specifications[<%= index %>][value]" value="<%= spec.value %>" placeholder="e.g., Intel i7">
                                                        <div class="invalid-feedback">Value is required.</div>
                                                    </div>
                                                    <div class="col-md-2">
                                                        <button type="button" class="btn btn-danger remove-spec-btn w-100">Remove</button>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } %>
                                </div>
                                <button type="button" class="btn btn-outline-success mt-2" id="add-spec-btn">
                                    <i class="fas fa-plus me-1"></i> Add Specification
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Card Image Upload -->
                    <div class="col-lg-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Card Image</h5>
                                <small class="text-muted">Upload a square image for product card display</small>
                            </div>
                            <div class="card-body">
                                <div class="image-upload-container">
                                    <div class="mb-3">
                                        <label for="cardImageUpload" class="form-label">Select Image <span class="text-danger">*</span></label>
                                        <input type="file" name="cardImage" id="cardImageUpload" accept="image/jpeg,image/png,image/gif,image/webp" class="form-control">
                                        <div class="invalid-feedback"></div>
                                    </div>
                                    <div id="cardThumbnailContainer" class="thumbnail-container" style='<%= product && product.cardImage ? "display:block" : "display:none" %>'>
                                        <img id="cardThumbnail" class="thumbnail-img" src="<%= product && product.cardImage ? '/uploads/products/' + product.cardImage : '' %>" alt="Card Image Preview">
                                        <button type="button" class="remove-btn" onclick="removeImage('cardImageUpload', 'cardThumbnailContainer')">×</button>
                                    </div>
                                    <button type="button" class="btn btn-outline-primary mt-2 crop-btn" data-target="cardImageUpload">
                                        <i class="fas fa-crop-alt me-1"></i> Crop Image
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Product Images Upload -->
                    <div class="col-lg-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Product Images</h5>
                                <small class="text-muted">Minimum 3, Maximum 4 images</small>
                            </div>
                            <div class="card-body">
                                <div class="image-upload-container">
                                    <div class="mb-3">
                                        <label for="productImagesUpload" class="form-label">Select Images <span class="text-danger">*</span></label>
                                        <input type="file" name="productImages" id="productImagesUpload" accept="image/jpeg,image/png,image/gif,image/webp" multiple class="form-control">
                                        <div class="invalid-feedback"></div>
                                    </div>
                                    <div id="productThumbnails" class="thumbnails-container">
                                        <% if(product && product.productImages && product.productImages.length > 0) { %>
                                            <% product.productImages.forEach((img, index) => { %>
                                                <div class="thumbnail-wrapper" data-index="<%= index %>" data-existing="true">
                                                    <img class="thumbnail-img" src="/uploads/products/<%= img %>" alt="Product Image">
                                                    <button type="button" class="remove-btn" onclick="removeImage('<%= index %>')">×</button>
                                                </div>
                                            <% }); %>
                                        <% } %>
                                    </div>
                                    <div class="mt-2">
                                        <small class="text-muted">Click on an image to select it for cropping</small>
                                    </div>
                                    <button type="button" class="btn btn-outline-primary mt-2 crop-btn" data-target="productImagesUpload">
                                        <i class="fas fa-crop-alt me-1"></i> Crop Selected Image
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Crop Modal -->
                    <div class="modal fade" id="cropModal">
                        <div class="modal-dialog modal-lg modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body p-0">
                                    <div class="img-container">
                                        <img id="imageToCrop" src="" alt="Image to crop">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <div class="w-100 d-flex justify-content-between align-items-center">
                                        <div>
                                            <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="zoomInBtn">
                                                <i class="fas fa-search-plus"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="zoomOutBtn">
                                                <i class="fas fa-search-minus"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="rotateLeftBtn">
                                                <i class="fas fa-undo"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" id="rotateRightBtn">
                                                <i class="fas fa-redo"></i>
                                            </button>
                                        </div>
                                        <div>
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                            <button type="button" class="btn btn-primary" id="cropButton">
                                                <i class="fas fa-crop-alt me-1"></i> Apply Crop
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 d-flex justify-content-end mt-4">
                        <a href="/admin/products" class="btn btn-secondary me-2">Cancel</a>
                        <button type="submit" class="btn btn-primary" id="submitBtn"><%= product ? 'Update Product' : 'Add Product' %></button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let cropper = null; // Explicitly initialize to null
        let currentFileInput = null;
        let currentImageIndex = null;
        const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
        const isEditMode = !!document.getElementById("productId").value;
    
        // Form submission
        const productForm = document.getElementById('ProductForm');
        productForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            clearErrors();
    
            if (!validateForm()) return;
    
            const formData = new FormData(productForm);
            const url = isEditMode ? `/admin/products/edit/${formData.get('productId')}` : '/admin/products/add';
            const method = isEditMode ? 'PATCH' : 'POST';
    
            try {
                const response = await fetch(url, {
                    method: method,
                    body: formData,
                    headers: {
                        'Accept': 'application/json'
                    }
                });
    
                const result = await response.json();
                if (!response.ok || !result.success) {
                    console.log('Validation errors from server:', result.errors);
                    displayErrors(result.errors || {});
                    Swal.fire('Error', result.message || 'Please fix the input errors and try again', 'error');
                } else {
                    Swal.fire('Success', isEditMode ? 'Product updated successfully!' : 'Product added successfully!', 'success')
                        .then(() => {
                            if (!isEditMode) {
                                productForm.reset();
                                resetImageInputs();
                            }
                            window.location.href = '/admin/products';
                        });
                }
            } catch (error) {
                console.error('Submission error:', error);
                Swal.fire('Error', 'Server error. Please try again.', 'error');
            }
        });
    
        // File input listeners
        document.getElementById('cardImageUpload').addEventListener('change', () => 
            handleFileChange('cardImageUpload', 'cardThumbnail', 'cardThumbnailContainer'));
        document.getElementById('productImagesUpload').addEventListener('change', handleMultipleFileChange);
    
        // Crop button listeners
        document.querySelectorAll('.crop-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                currentFileInput = this.getAttribute('data-target');
                const files = document.getElementById(currentFileInput).files;
    
                if (currentFileInput === 'productImagesUpload') {
                    const selected = document.querySelector('.thumbnail-selected');
                    if (!selected) {
                        Swal.fire('Warning', 'Please select an image to crop', 'warning');
                        return;
                    }
                    currentImageIndex = parseInt(selected.getAttribute('data-index'));
                    const isExisting = selected.getAttribute('data-existing');
                    if (isExisting) {
                        fetch(selected.querySelector('img').src)
                            .then(res => res.blob())
                            .then(blob => {
                                const file = new File([blob], `existing-${currentImageIndex}.jpg`, { type: 'image/jpeg' });
                                openCropModal(file);
                            });
                    } else {
                        const file = files[currentImageIndex];
                        if (!file) {
                            Swal.fire('Warning', 'No file selected for cropping', 'warning');
                            return;
                        }
                        openCropModal(file);
                    }
                } else {
                    currentImageIndex = 0;
                    if (!files.length && !isEditMode) {
                        Swal.fire('Warning', 'Please select an image first', 'warning');
                        return;
                    } else if (!files.length && isEditMode) {
                        fetch(document.getElementById('cardThumbnail').src)
                            .then(res => res.blob())
                            .then(blob => {
                                const file = new File([blob], 'existing-card.jpg', { type: 'image/jpeg' });
                                openCropModal(file);
                            });
                    } else {
                        openCropModal(files[0]);
                    }
                }
            });
        });
    
        // Crop functionality
        document.getElementById('cropButton').addEventListener('click', () => {
            if (!cropper) return;
            const canvas = cropper.getCroppedCanvas({ width: 500, height: 500 });
            canvas.toBlob(blob => {
                const croppedFile = new File([blob], `cropped_${Date.now()}.jpg`, { type: 'image/jpeg' });
                if (currentFileInput === 'cardImageUpload') {
                    updateSingleFile(croppedFile);
                } else {
                    updateMultipleFile(croppedFile);
                }
                cropModal.hide();
                destroyCropper();
            }, 'image/jpeg', 0.9);
        });
    
        // Zoom and rotate controls
        document.getElementById('rotateLeftBtn').addEventListener('click', () => cropper?.rotate(-90));
        document.getElementById('rotateRightBtn').addEventListener('click', () => cropper?.rotate(90));
        document.getElementById('zoomInBtn').addEventListener('click', () => {
            if (cropper) cropper.zoom(0.1);
        });
        document.getElementById('zoomOutBtn').addEventListener('click', () => {
            if (cropper) cropper.zoom(-0.1);
        });
    
        // Modal cleanup
        document.getElementById('cropModal').addEventListener('hidden.bs.modal', () => {
            destroyCropper();
        });
    
        function destroyCropper() {
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }
    
        function openCropModal(file) {
            const img = document.getElementById('imageToCrop');
            const reader = new FileReader();
            reader.onload = e => {
                img.src = e.target.result;
                cropModal.show();
                document.getElementById('cropModal').addEventListener('shown.bs.modal', initializeCropper, { once: true });
            };
            reader.readAsDataURL(file);
        }
    
        function initializeCropper() {
            const img = document.getElementById('imageToCrop');
            destroyCropper(); // Ensure no previous instance exists
            cropper = new Cropper(img, {
                aspectRatio: 1,
                viewMode: 1,
                zoomable: true,
                scalable: true,
                movable: true,
                minCropBoxWidth: 100,
                minCropBoxHeight: 100,
                background: false,
                responsive: true,
                autoCropArea: 1,
            });
        }
    
        // Validation
        function validateForm() {
            let isValid = true;
            const fields = ['productName', 'description', 'category', 'brand', 'regularPrice', 'salePrice', 'quantity', 'status'];
            
            fields.forEach(id => {
                const input = document.getElementById(id);
                if (!input.value.trim()) {
                    showError(id, `${input.labels[0].textContent} is required`);
                    isValid = false;
                }
            });
    
            const cardImage = document.getElementById('cardImageUpload');
            const cardThumbnailContainer = document.getElementById('cardThumbnailContainer');
            if (!cardImage.files.length && (!isEditMode || cardThumbnailContainer.style.display === 'none')) {
                showError('cardImageUpload', 'Card image is required');
                isValid = false;
            }
    
            const productImages = document.getElementById('productImagesUpload');
            const thumbnails = document.querySelectorAll('#productThumbnails .thumbnail-wrapper');
            const existingImagesCount = Array.from(thumbnails).filter(t => t.getAttribute('data-existing')).length;
            const newImagesCount = productImages.files.length;
            const totalImages = existingImagesCount + newImagesCount;
    
            if ((!isEditMode && totalImages < 3) || (isEditMode && totalImages < 3 && newImagesCount === 0)) {
                showError('productImagesUpload', 'Minimum 3 product images required');
                isValid = false;
            } else if (totalImages > 4) {
                showError('productImagesUpload', 'Maximum 4 product images allowed');
                isValid = false;
            }
    
            if (!validateSpecifications()) {
                isValid = false;
            }
            return isValid;
        }
    
        function validateSpecifications() {
            let isValid = true;
            const specEntries = document.querySelectorAll('.specification-entry');
            const specificationsContainer = document.getElementById('specifications-container');
            
            if (specEntries.length < 3) {
                let errorMessageArea = document.getElementById('specifications-error-area');
                if (!errorMessageArea) {
                    errorMessageArea = document.createElement('div');
                    errorMessageArea.id = 'specifications-error-area';
                    errorMessageArea.className = 'alert alert-danger mt-2';
                    errorMessageArea.style.display = 'none';
                    const addSpecBtn = document.getElementById('add-spec-btn');
                    addSpecBtn.parentNode.insertBefore(errorMessageArea, addSpecBtn);
                }
                errorMessageArea.textContent = 'Minimum 3 specifications required';
                errorMessageArea.style.display = 'block';
                specificationsContainer.classList.add('border', 'border-danger', 'p-2', 'rounded');
                isValid = false;
            } else if (specEntries.length > 10) {
                let errorMessageArea = document.getElementById('specifications-error-area');
                if (!errorMessageArea) {
                    errorMessageArea = document.createElement('div');
                    errorMessageArea.id = 'specifications-error-area';
                    errorMessageArea.className = 'alert alert-danger mt-2';
                    errorMessageArea.style.display = 'none';
                    const addSpecBtn = document.getElementById('add-spec-btn');
                    addSpecBtn.parentNode.insertBefore(errorMessageArea, addSpecBtn);
                }
                errorMessageArea.textContent = 'Maximum 10 specifications allowed';
                errorMessageArea.style.display = 'block';
                specificationsContainer.classList.add('border', 'border-danger', 'p-2', 'rounded');
                isValid = false;
            } else {
                const errorMessageArea = document.getElementById('specifications-error-area');
                if (errorMessageArea) {
                    errorMessageArea.style.display = 'none';
                }
                specificationsContainer.classList.remove('border', 'border-danger', 'p-2', 'rounded');
            }
            
            specEntries.forEach((entry) => {
                const nameInput = entry.querySelector('.spec-name');
                const valueInput = entry.querySelector('.spec-value');
                
                if (!nameInput.value.trim()) {
                    nameInput.classList.add('is-invalid');
                    const feedback = nameInput.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.textContent = 'Specification name is required.';
                        feedback.style.display = 'block';
                    }
                    isValid = false;
                } else {
                    nameInput.classList.remove('is-invalid');
                }
                
                if (!valueInput.value.trim()) {
                    valueInput.classList.add('is-invalid');
                    const feedback = valueInput.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.textContent = 'Specification value is required.';
                        feedback.style.display = 'block';
                    }
                    isValid = false;
                } else {
                    valueInput.classList.remove('is-invalid');
                }
            });
            
            return isValid;
        }
    
        // Error handling
        function showError(id, message) {
            const input = document.getElementById(id);
            input.classList.add('is-invalid');
            const feedback = input.nextElementSibling;
            if (feedback && feedback.classList.contains('invalid-feedback')) {
                feedback.textContent = message;
                feedback.style.display = 'block';
            }
        }
    
        function clearErrors() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => {
                el.textContent = '';
                el.style.display = 'none';
            });
            
            const errorMessageArea = document.getElementById('specifications-error-area');
            if (errorMessageArea) {
                errorMessageArea.style.display = 'none';
            }
            
            const specificationsContainer = document.getElementById('specifications-container');
            if (specificationsContainer) {
                specificationsContainer.classList.remove('border', 'border-danger', 'p-2', 'rounded');
            }
        }
    
        function displayErrors(errors) {
            Object.entries(errors).forEach(([field, msg]) => {
                const inputId = field === 'cardImage' ? 'cardImageUpload' : 
                                field === 'productImages' ? 'productImagesUpload' : field;
                showError(inputId, msg);
            });
        }
    
        // Image handling
        function handleFileChange(inputId, thumbnailId, containerId) {
            const fileInput = document.getElementById(inputId);
            const thumbnail = document.getElementById(thumbnailId);
            const container = document.getElementById(containerId);
    
            if (fileInput.files.length) {
                const file = fileInput.files[0];
                if (validateFile(file)) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        thumbnail.src = e.target.result;
                        container.style.display = 'block';
                        const removeInput = document.querySelector('input[name="removeCardImage"]');
                        if (removeInput) removeInput.remove();
                    };
                    reader.readAsDataURL(file);
                } else {
                    fileInput.value = '';
                    container.style.display = 'none';
                }
            }
        }
    
        function handleMultipleFileChange() {
            const fileInput = document.getElementById('productImagesUpload');
            const container = document.getElementById('productThumbnails');
            const existingThumbnails = Array.from(container.children).filter(t => t.getAttribute('data-existing'));
    
            Array.from(container.children).forEach(child => {
                if (!child.getAttribute('data-existing')) child.remove();
            });
            
            Array.from(fileInput.files).forEach((file, index) => {
                if (validateFile(file)) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        const wrapper = document.createElement('div');
                        wrapper.className = 'thumbnail-wrapper';
                        wrapper.setAttribute('data-index', existingThumbnails.length + index);
    
                        const img = document.createElement('img');
                        img.className = 'thumbnail-img';
                        img.src = e.target.result;
    
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-btn';
                        removeBtn.innerHTML = '×';
                        removeBtn.onclick = (e) => {
                            e.stopPropagation();
                            removeImage(existingThumbnails.length + index);
                        };
    
                        wrapper.appendChild(img);
                        wrapper.appendChild(removeBtn);
                        wrapper.onclick = e => {
                            if (e.target !== removeBtn) selectThumbnail(wrapper);
                        };
                        container.appendChild(wrapper);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    
        function validateFile(file) {
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
            if (!allowedTypes.includes(file.type) || file.size > 5 * 1024 * 1024) {
                Swal.fire('Error', `Invalid file: ${file.name}. Use JPEG/PNG/GIF/WEBP under 5MB`, 'error');
                return false;
            }
            return true;
        }
    
        function updateSingleFile(croppedFile) {
            const fileInput = document.getElementById(currentFileInput);
            const thumbnail = document.getElementById('cardThumbnail');
            const container = document.getElementById('cardThumbnailContainer');
    
            const dt = new DataTransfer();
            dt.items.add(croppedFile);
            fileInput.files = dt.files;
    
            const reader = new FileReader();
            reader.onload = e => {
                thumbnail.src = e.target.result;
                container.style.display = 'block';
            };
            reader.readAsDataURL(croppedFile);
        }
    
        function updateMultipleFile(croppedFile) {
            const fileInput = document.getElementById(currentFileInput);
            const wrapper = document.querySelector(`.thumbnail-wrapper[data-index="${currentImageIndex}"]`);
            const img = wrapper.querySelector('img');
    
            const dt = new DataTransfer();
            const files = Array.from(fileInput.files);
            if (wrapper.getAttribute('data-existing')) {
                files.push(croppedFile);
            } else {
                files[currentImageIndex - document.querySelectorAll('[data-existing]').length] = croppedFile;
            }
            files.forEach(file => dt.items.add(file));
            fileInput.files = dt.files;
    
            const reader = new FileReader();
            reader.onload = e => img.src = e.target.result;
            reader.readAsDataURL(croppedFile);
        }
    
        function selectThumbnail(wrapper) {
            document.querySelectorAll('.thumbnail-wrapper').forEach(el => el.classList.remove('thumbnail-selected'));
            wrapper.classList.add('thumbnail-selected');
        }
    
        function removeImage(indexOrId) {
            if (typeof indexOrId === 'string' && indexOrId === 'cardImageUpload') {
                const fileInput = document.getElementById(indexOrId);
                const container = document.getElementById('cardThumbnailContainer');
                fileInput.value = '';
                container.style.display = 'none';
                if (isEditMode) {
                    const removeInput = document.createElement('input');
                    removeInput.type = 'hidden';
                    removeInput.name = 'removeCardImage';
                    removeInput.value = 'true';
                    productForm.appendChild(removeInput);
                }
            } else {
                const fileInput = document.getElementById('productImagesUpload');
                const container = document.getElementById('productThumbnails');
                const wrapper = container.querySelector(`.thumbnail-wrapper[data-index="${indexOrId}"]`);
                if (wrapper) {
                    const isExisting = wrapper.getAttribute('data-existing');
                    wrapper.remove();
                    if (isExisting && isEditMode) {
                        const removeInput = document.createElement('input');
                        removeInput.type = 'hidden';
                        removeInput.name = `removedImages[${indexOrId}]`;
                        removeInput.value = 'true';
                        productForm.appendChild(removeInput);
                    } else {
                        const dt = new DataTransfer();
                        const existingCount = container.querySelectorAll('[data-existing]').length;
                        Array.from(fileInput.files).forEach((file, i) => {
                            if (i !== indexOrId - existingCount) dt.items.add(file);
                        });
                        fileInput.files = dt.files;
                    }
                    Array.from(container.children).forEach((child, i) => child.setAttribute('data-index', i));
                }
            }
        }
    
        function resetImageInputs() {
            document.getElementById('cardImageUpload').value = '';
            document.getElementById('cardThumbnailContainer').style.display = 'none';
            document.getElementById('productImagesUpload').value = '';
            document.getElementById('productThumbnails').innerHTML = '';
        }
    
        // Specifications handling
        document.getElementById('add-spec-btn').addEventListener('click', function() {
            const container = document.getElementById('specifications-container');
            const specEntries = container.querySelectorAll('.specification-entry');
            const newIndex = specEntries.length;
            
            const entryDiv = document.createElement('div');
            entryDiv.className = 'specification-entry mb-3';
            entryDiv.setAttribute('data-index', newIndex);
            
            entryDiv.innerHTML = `
                <div class="row g-3 align-items-end">
                    <div class="col-md-5">
                        <label class="form-label">Specification Name</label>
                        <input type="text" class="form-control spec-name" name="specifications[${newIndex}][name]" placeholder="e.g., Processor">
                        <div class="invalid-feedback">Specification name is required.</div>
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Value</label>
                        <input type="text" class="form-control spec-value" name="specifications[${newIndex}][value]" placeholder="e.g., Intel i7">
                        <div class="invalid-feedback">Value is required.</div>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-danger remove-spec-btn w-100">Remove</button>
                    </div>
                </div>
            `;
            
            container.appendChild(entryDiv);
            
            entryDiv.querySelector('.remove-spec-btn').addEventListener('click', function() {
                entryDiv.remove();
                reindexSpecifications();
            });
        });
    
        function reindexSpecifications() {
            const container = document.getElementById('specifications-container');
            const specEntries = container.querySelectorAll('.specification-entry');
            
            specEntries.forEach((entry, index) => {
                entry.setAttribute('data-index', index);
                const nameInput = entry.querySelector('.spec-name');
                const valueInput = entry.querySelector('.spec-value');
                
                nameInput.name = `specifications[${index}][name]`;
                valueInput.name = `specifications[${index}][value]`;
            });
        }
    
        document.querySelectorAll('.remove-spec-btn').forEach(button => {
            button.addEventListener('click', function() {
                const specEntry = this.closest('.specification-entry');
                specEntry.remove();
                reindexSpecifications();
            });
        });
    });
    </script>

<%- include("../partial/admin/footer") %>