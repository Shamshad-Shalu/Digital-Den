<%- include("../../views/partial/admin/header") %>
<style>
    .cursor-pointer {
        cursor: pointer;
    }

    .avatar-sm {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.875rem;
    }

    .stats-card {
        transition: transform 0.3s;
    }

    .stats-card:hover {
        transform: translateY(-5px);
    }

    .stats-card .border-start {
        border-left-width: 4px !important;
    }

    /* Chart Filter Buttons */
    .chart-filter {
        display: flex;
        gap: 5px;
    }

    .chart-filter .filter-btn {
        padding: 0.25rem 0.75rem;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .chart-filter .filter-btn.active {
        background-color: #6366f1;
        color: white;
        border-color: #6366f1;
    }

    /* Top List Styling */
    .top-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .top-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }

    .top-list li:last-child {
        border-bottom: none;
    }

    .top-list .info {
        display: flex;
        align-items: center;
    }

    .top-list .info h6 {
        margin: 0;
        font-size: 0.9rem;
    }

    .top-list .info p {
        margin: 0;
        font-size: 0.75rem;
        color: #6c757d;
    }

    .top-list .value {
        font-weight: 600;
        font-size: 0.875rem;
    }

    /* Badge colors */
    .bg-purple {
        background-color: #6f42c1;
        color: white;
    }

    .bg-amber {
        background-color: #ffc107;
        color: #212529;
    }

    /* Chart container */
    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }

    /* No data overlay for charts */
    .no-data-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 10;
        font-size: 1rem;
        color: #6c757d;
    }

    /* Responsive styles */
    @media (max-width: 768px) {
        .stats-card .card-body {
            padding: 1rem;
        }

        .chart-filter button {
            font-size: 0.8rem;
            padding: 0.3rem 0.6rem;
        }
        
        .chart-container {
            height: 250px;
        }
    }
</style>

<!-- Main Content -->
<div class="main-content container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <h4>Dashboard Overview</h4>
            <p class="text-muted">Analytics and sales performance</p>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row">
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-success">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-success bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-chart-line text-success fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Revenue</p>
                        <h3 class="mb-0 fw-bold" id="netSale">â‚¹0.00</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-primary">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-primary bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-shopping-cart text-primary fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Orders</p>
                        <h3 class="mb-0 fw-bold" id="totalOrders">0</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-warning">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-warning bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-users text-warning fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Customers</p>
                        <h3 class="mb-0 fw-bold" id="totalCustomer">0</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-danger">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-danger bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-box text-danger fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Products</p>
                        <h3 class="mb-0 fw-bold" id="totalProduct">0</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Sales Overview</span>
                    <div class="chart-filter">
                        <button class="filter-btn" data-period="day">Day</button>
                        <button class="filter-btn" data-period="week">Week</button>
                        <button class="filter-btn active" data-period="month">Month</button>
                        <button class="filter-btn" data-period="year">Year</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="salesChart"></canvas>
                        <div class="no-data-overlay d-none">No data available for this period</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">Revenue by Category</div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="categoryChart"></canvas>
                        <div class="no-data-overlay d-none">No category data available</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Best Selling Sections -->
    <div class="row mt-3">
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">Best Selling Products (Top 10)</div>
                <div class="card-body">
                    <ul class="top-list" id="bestProducts">
                        <!-- Dynamically populated -->
                        <li class="text-center text-muted py-4">Loading...</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mt-1">
            <div class="card">
                <div class="card-header">Best Selling Categories (Top 10)</div>
                <div class="card-body">
                    <ul class="top-list" id="bestCategories">
                        <!-- Dynamically populated -->
                        <li class="text-center text-muted py-4">Loading...</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mt-1">
            <div class="card">
                <div class="card-header">Best Selling Brands (Top 10)</div>
                <div class="card-body">
                    <ul class="top-list" id="bestBrands">
                        <!-- Dynamically populated -->
                        <li class="text-center text-muted py-4">Loading...</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Orders -->
    <div class="row my-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Recent Orders</span>
                    <a href="/admin/orders">
                        <button class="btn btn-sm btn-primary">View All</button>
                    </a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="recentOrders">
                                <!-- Dynamically populated -->
                                <tr>
                                    <td colspan="5" class="text-center py-3">Loading recent orders...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let salesChart, categoryChart;
    let currentPeriod = "month";

    async function fetchDashboardData(period = "month") {
        currentPeriod = period;
        const queryParams = new URLSearchParams({
            period
        }).toString();

        try {
            // Show loading state
            document.getElementById("bestProducts").innerHTML = '<li class="text-center text-muted py-4">Loading...</li>';
            document.getElementById("bestCategories").innerHTML = '<li class="text-center text-muted py-4">Loading...</li>';
            document.getElementById("bestBrands").innerHTML = '<li class="text-center text-muted py-4">Loading...</li>';
            document.getElementById("recentOrders").innerHTML = '<tr><td colspan="5" class="text-center py-3">Loading recent orders...</td></tr>';

            const response = await fetch(`/admin/dashboard?${queryParams}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" },
            });

            if (response.status === 401 || response.status === 403) {
                Swal.fire({
                    icon: "error",
                    title: "Unauthorized",
                    text: "Please log in to continue",
                }).then(() => {
                    window.location.href = "/admin/login";
                });
                return;
            }

            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || "Failed to fetch dashboard data");
            }

            // Update Stats
            document.getElementById("netSale").innerHTML = `
            â‚¹${Number(data.netSale).toLocaleString("en-IN", {minimumFractionDigits: 2, maximumFractionDigits: 2,})}`;
            document.getElementById("totalOrders").innerHTML = data.totalOrders;
            document.getElementById("totalCustomer").innerHTML = data.totalCustomers;
            document.getElementById("totalProduct").innerHTML = data.totalProducts;

            // Update Sales Chart
            updateSalesChart(data.salesChart.labels, data.salesChart.data, period);

            // Update Category Chart
            updateCategoryChart(data.categoryChart.labels, data.categoryChart.data);

            // Best Selling Products
            updateBestProducts(data.bestProducts);

            // Best Selling Categories
            updateBestCategories(data.bestCategories);

            // Update Best Selling Brands
            updateBestBrands(data.bestBrands);

            // Recent Orders
            updateRecentOrders(data.recentOrders);

        } catch (error) {
            console.error("Error fetching dashboard data:", error);
            Swal.fire({ 
                icon: "error", 
                title: "Error", 
                text: error.message || "Failed to load dashboard data" 
            });

            // Show error state in the lists
            const errorMessage = '<li class="text-center text-danger py-3">Failed to load data</li>';
            document.getElementById("bestProducts").innerHTML = errorMessage;
            document.getElementById("bestCategories").innerHTML = errorMessage;
            document.getElementById("bestBrands").innerHTML = errorMessage;
            document.getElementById("recentOrders").innerHTML = '<tr><td colspan="5" class="text-center text-danger py-3">Failed to load recent orders</td></tr>';
        }
    }

    function updateSalesChart(labels, data, period) {
        const noDataOverlay = document.querySelector('#salesChart').closest('.chart-container').querySelector('.no-data-overlay');
        
        if (!labels.length || !data.length) {
            noDataOverlay.classList.remove('d-none');
            return;
        }
        
        noDataOverlay.classList.add('d-none');
        
        // Format x-axis labels based on period
        const formattedLabels = labels.map(label => {
            if (period === 'day') {
                // If format is "YYYY-MM-DD HH:00", extract the hour
                const parts = label.split(' ');
                if (parts.length > 1) {
                    return parts[1].split(':')[0] + ':00';
                }
                return label;
            } else if (period === 'week' || period === 'month') {
                // If format is "YYYY-MM-DD", extract the day
                const parts = label.split('-');
                if (parts.length > 2) {
                    return parts[2];
                }
                return label;
            } else if (period === 'year') {
                // If format is "YYYY-MM", extract month name
                const parts = label.split('-');
                if (parts.length > 1) {
                    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                    const monthIndex = parseInt(parts[1]) - 1;
                    return monthNames[monthIndex];
                }
                return label;
            }
            return label;
        });

        salesChart.data.labels = labels;
        salesChart.data.datasets[0].data = data;
        
        // Update axis title based on period
        let xAxisTitle = 'Time Period';
        switch(period) {
            case 'day': xAxisTitle = 'Hours'; break;
            case 'week': xAxisTitle = 'Days'; break;
            case 'month': xAxisTitle = 'Days of Month'; break;
            case 'year': xAxisTitle = 'Months'; break;
        }
        
        salesChart.options.scales.x.title.text = xAxisTitle;
        
        // Custom tick formatter based on period
        salesChart.options.scales.x.ticks.callback = function(value, index, ticks) {
            return formattedLabels[index];
        };
        
        salesChart.update();
    }

    function updateCategoryChart(labels, data) {
        const noDataOverlay = document.querySelector('#categoryChart').closest('.chart-container').querySelector('.no-data-overlay');
        
        if (!labels.length || !data.length) {
            noDataOverlay.classList.remove('d-none');
            return;
        }
        
        noDataOverlay.classList.add('d-none');
        
        categoryChart.data.labels = labels;
        categoryChart.data.datasets[0].data = data;
        categoryChart.update();
    }

    function updateBestProducts(products) {
        const bestProducts = document.getElementById("bestProducts");
        
        if (!products || !products.length) {
            bestProducts.innerHTML = '<li class="text-center text-muted py-3">No product data available</li>';
            return;
        }
        
        bestProducts.innerHTML = products
            .map((product, index) => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${product.name || "N/A"}</h6>
                            <p>${product.categoryName || "N/A"}</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>${product.units || 0} units</span>
                    </div>
                </li>
            `)
            .join("");
            
        if (products.length === 0) {
            bestProducts.innerHTML = '<li class="text-center text-muted py-3">No product data available</li>';
        }
    }

    function updateBestCategories(categories) {
        const bestCategories = document.getElementById("bestCategories");
        
        if (!categories || !categories.length) {
            bestCategories.innerHTML = '<li class="text-center text-muted py-3">No category data available</li>';
            return;
        }
        
        bestCategories.innerHTML = categories
            .map(category => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${category.name || "N/A"}</h6>
                            <p>${category.products || 0} products</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>â‚¹${Number(category.revenue || 0).toLocaleString("en-IN", {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2,
                        })}</span>
                    </div>
                </li>
            `)
            .join("");
            
        if (categories.length === 0) {
            bestCategories.innerHTML = '<li class="text-center text-muted py-3">No category data available</li>';
        }
    }

    function updateBestBrands(brands) {
        const bestBrands = document.getElementById("bestBrands");
        
        if (!brands || !brands.length) {
            bestBrands.innerHTML = '<li class="text-center text-muted py-3">No brand data available</li>';
            return;
        }
        
        bestBrands.innerHTML = brands
            .map(brand => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${brand.name || "N/A"}</h6>
                            <p>${brand.categoryName || "N/A"}</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>â‚¹${Number(brand.revenue || 0).toLocaleString("en-IN", {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2,
                        })}</span>
                    </div>
                </li>
            `)
            .join("");
            
        if (brands.length === 0) {
            bestBrands.innerHTML = '<li class="text-center text-muted py-3">No brand data available</li>';
        }
    }

    function updateRecentOrders(orders) {
        const recentOrders = document.getElementById("recentOrders");
        
        if (!orders || !orders.length) {
            recentOrders.innerHTML = '<tr><td colspan="5" class="text-center py-3">No recent orders</td></tr>';
            return;
        }
        
        recentOrders.innerHTML = orders
            .map(order => `
                <tr>
                    <td>${order.orderId || "N/A"}</td>
                    <td>${order.customer || "N/A"}</td>
                    <td>${formatDate(order.date)}</td>
                    <td>â‚¹${Number(order.amount || 0).toLocaleString("en-IN", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2,
                    })}</td>
                    <td><span class="badge ${getStatusClass(order.status)}">${
                        order.status || "N/A"
                    }</span></td>
                </tr>
            `)
            .join("");
            
        if (orders.length === 0) {
            recentOrders.innerHTML = '<tr><td colspan="5" class="text-center py-3">No recent orders</td></tr>';
        }
    }

    function formatDate(dateString) {
        if (!dateString) return "N/A";
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return "Invalid Date";
        
        return date.toLocaleDateString("en-US", {
            month: "short",
            day: "2-digit",
            year: "numeric"
        });
    }

    function getStatusClass(status) {
        switch (status) {
            case 'Pending': return 'bg-warning';
            case 'Processing': return 'bg-primary';
            case 'Shipped': return 'bg-info';
            case 'Out for Delivery': return 'bg-purple';
            case 'Delivered': return 'bg-success';
            case 'Cancelled': return 'bg-danger';
            case 'Returned': return 'bg-secondary';
            case 'Return Request': return 'bg-amber';
            default: return 'bg-light text-dark';
        }
    }

    // Initialize Charts
    document.addEventListener("DOMContentLoaded", () => {
        const salesCtx = document.getElementById("salesChart").getContext("2d");
        salesChart = new Chart(salesCtx, {
            type: "line",
            data: {
                labels: [],
                datasets: [
                    {
                        label: "Sales",
                        data: [],
                        backgroundColor: "rgba(99, 102, 241, 0.1)",
                        borderColor: "#6366f1",
                        borderWidth: 2,
                        tension: 0.3,
                        pointBackgroundColor: "#fff",
                        pointBorderColor: "#6366f1",
                        pointBorderWidth: 2,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: { borderDash: [2, 2] },
                        title: {
                            display: true,
                            text: "Revenue (â‚¹)",
                            font: {
                                size: 12
                            }
                        },
                        ticks: {
                            callback: function(value) {
                                return 'â‚¹' + value.toLocaleString('en-IN');
                            }
                        }
                    },
                    x: {
                        grid: { display: false },
                        title: {
                            display: true,
                            text: "Days of Month",
                            font: {
                                size: 12
                            }
                        },
                        ticks: {
                            maxRotation: 0,
                            autoSkip: true,
                            maxTicksLimit: 12
                        }
                    },
                },
                plugins: { 
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'â‚¹' + context.parsed.y.toLocaleString('en-IN');
                            }
                        }
                    }
                },
                interaction: {
                    mode: 'index',
                    intersect: false
                }
            },
        });

        const categoryCtx = document.getElementById("categoryChart").getContext("2d");
        categoryChart = new Chart(categoryCtx, {
            type: "doughnut",
            data: {
                labels: [],
                datasets: [
                    {
                        data: [],
                        backgroundColor: [
                            "#6366f1", "#10b981", "#3b82f6", 
                            "#f59e0b", "#ef4444", "#8b5cf6",
                            "#ec4899", "#14b8a6", "#f43f5e",
                            "#64748b"
                        ],
                        borderWidth: 0,
                        hoverOffset: 5,
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: "65%",
                plugins: { 
                    legend: { 
                        position: "bottom",
                        labels: {
                            boxWidth: 12,
                            padding: 10
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed || 0;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: â‚¹${value.toLocaleString('en-IN')} (${percentage}%)`;
                            }
                        }
                    }
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                }
            },
        });

        // Make charts responsive
        window.addEventListener('resize', function() {
            salesChart.resize();
            categoryChart.resize();
        });

        // Filter Buttons
        const filterBtns = document.querySelectorAll(".filter-btn");
        filterBtns.forEach((btn) => {
            btn.addEventListener("click", () => {
                filterBtns.forEach((b) => b.classList.remove("active"));
                btn.classList.add("active");
                fetchDashboardData(btn.dataset.period);
            });
        });

        // Initial data fetch
        fetchDashboardData("month");
    });
</script>

<%- include("../../views/partial/admin/footer.ejs") %>