<%- include("../../views/partial/admin/header") %>

<style>
    .cursor-pointer {
        cursor: pointer;
    }

    .avatar-sm {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.875rem;
    }

    .stats-card {
        transition: transform 0.3s;
    }

    .stats-card:hover {
        transform: translateY(-5px);
    }

    .stats-card .border-start {
        border-left-width: 4px !important;
    }

    /* Responsive styles */
    @media (max-width: 768px) {
        .stats-card .card-body {
            padding: 1rem;
        }

        .chart-filter button {
            font-size: 0.8rem;
            padding: 0.3rem 0.6rem;
        }
    }
</style>

<!-- Main Content -->
<div class="main-content container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <h4>Dashboard Overview</h4>
            <p class="text-muted">Analytics and sales performance</p>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row">
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-success">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-success bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-chart-line text-success fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Revenue</p>
                        <h3 class="mb-0 fw-bold" id="netSale">₹0.00</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-primary">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-primary bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-shopping-cart text-primary fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Orders</p>
                        <h3 class="mb-0 fw-bold" id="totalOrders">0</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-warning">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-warning bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-users text-warning fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Customers</p>
                        <h3 class="mb-0 fw-bold" id="totalCustomer">0</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stats-card border-start border-4 border-danger">
                <div class="card-body d-flex align-items-center">
                    <div class="bg-danger bg-opacity-10 p-3 rounded-circle me-3">
                        <i class="fas fa-box text-danger fs-4"></i>
                    </div>
                    <div>
                        <p class="text-muted small mb-0">Total Products</p>
                        <h3 class="mb-0 fw-bold" id="totalProduct">0</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Sales Overview</span>
                    <div class="chart-filter">
                        <button class="filter-btn" data-period="day">Day</button>
                        <button class="filter-btn" data-period="week">Week</button>
                        <button class="filter-btn active" data-period="month">Month</button>
                        <button class="filter-btn" data-period="year">Year</button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="salesChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">Revenue by Category</div>
                <div class="card-body">
                    <canvas id="categoryChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Best Selling Sections -->
    <div class="row mt-3">
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">Best Selling Products (Top 10)</div>
                <div class="card-body">
                    <ul class="top-list" id="bestProducts">
                        <!-- Dynamically populated -->
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mt-1">
            <div class="card">
                <div class="card-header">Best Selling Categories (Top 10)</div>
                <div class="card-body">
                    <ul class="top-list" id="bestCategories">
                        <!-- Dynamically populated -->
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mt-1">
            <div class="card">
                <div class="card-header">Best Selling Brands (Top 10)</div>
                <div class="card-body">
                    <ul class="top-list" id="bestBrands">
                        <!-- Dynamically populated -->
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Orders -->
    <div class="row my-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Recent Orders</span>
                    <a href="/admin/orders">
                        <button class="btn btn-sm btn-primary">View All</button>
                    </a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="recentOrders">
                                <!-- Dynamically populated -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- 
<script>
    let salesChart, categoryChart;

    async function fetchDashboardData(period = 'month') {
        const queryParams = new URLSearchParams({
            period
        }).toString();

        try {
            const response = await fetch(`/admin/dashboard?${queryParams}`, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
            });

            if (response.status === 401 || response.status === 403) {
                Swal.fire({
                    icon: 'error',
                    title: 'Unauthorized',
                    text: 'Please log in to continue',
                }).then(() => {
                    window.location.href = '/admin/login';
                });
                return;
            }

            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || 'Failed to fetch dashboard data');
            }

            // Update Stats
            document.getElementById('netSale').innerHTML = `₹${Number(data.netSale).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            document.getElementById('totalOrders').innerHTML = data.totalOrders;
            document.getElementById('totalCustomer').innerHTML = data.totalCustomers;
            document.getElementById('totalProduct').innerHTML = data.totalProducts;

            // Update Sales Chart
            salesChart.data.labels = data.salesChart.labels;
            salesChart.data.datasets[0].data = data.salesChart.data;
            salesChart.update();

            // Update Category Chart
            categoryChart.data.labels = data.categoryChart.labels;
            categoryChart.data.datasets[0].data = data.categoryChart.data;
            categoryChart.update();

            // Update Best Selling Products
            const bestProducts = document.getElementById('bestProducts');
            bestProducts.innerHTML = data.bestProducts.map(product => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${product.name || 'N/A'}</h6>
                            <p>${product.categoryName || 'N/A'}</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>${product.units || 0} units</span>
                    </div>
                </li>
            `).join('');

            // Update Best Selling Categories
            const bestCategories = document.getElementById('bestCategories');
            bestCategories.innerHTML = data.bestCategories.map(category => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${category.name || 'N/A'}</h6>
                            <p>${category.products || 0} products</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>₹${Number(category.revenue || 0).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                </li>
            `).join('');

            // Update Best Selling Brands
            const bestBrands = document.getElementById('bestBrands');
            bestBrands.innerHTML = data.bestBrands.map(brand => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${brand.name || 'N/A'}</h6>
                            <p>${brand.categoryName || 'N/A'}</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>₹${Number(brand.revenue || 0).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                </li>
            `).join('');

            // Update Recent Orders
            const recentOrders = document.getElementById('recentOrders');
            recentOrders.innerHTML = data.recentOrders.map(order => `
                <tr>
                    <td>${order.orderId || 'N/A'}</td>
                    <td>${order.customer || 'N/A'}</td>
                    <td>${new Date(order.date || Date.now()).toLocaleDateString("en-US", { month: "short", day: "2-digit", year: "numeric" })}</td>
                    <td>₹${Number(order.amount || 0).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                    <td><span class="badge bg-${getStatusClass(order.status)}">${order.status || 'N/A'}</span></td>
                </tr>
            `).join('');

            function getStatusClass(status) {
                switch (status) {
                    case 'Completed': return 'success';
                    case 'Processing': return 'warning text-dark';
                    case 'Shipped': return 'primary';
                    case 'Canceled': return 'danger';
                    default: return 'secondary';
                }
            }
        } catch (error) {
            console.error('Error fetching dashboard data:', error);
            Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Failed to load dashboard data' });
        }
    }

    // Initialize Charts
    document.addEventListener("DOMContentLoaded", () => {
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        salesChart = new Chart(salesCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Sales',
                    data: [],
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    borderColor: '#6366f1',
                    borderWidth: 2,
                    tension: 0.3,
                    pointBackgroundColor: '#fff',
                    pointBorderColor: '#6366f1',
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: true, grid: { borderDash: [2, 2] } },
                    x: { grid: { display: false } }
                },
                plugins: { legend: { display: false } }
            }
        });

        const categoryCtx = document.getElementById('categoryChart').getContext('2d');
        categoryChart = new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: [],
                datasets: [{
                    data: [],
                    backgroundColor: ['#6366f1', '#10b981', '#3b82f6', '#f59e0b', '#ef4444'],
                    borderWidth: 0,
                    hoverOffset: 5
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '70%',
                plugins: { legend: { position: 'bottom' } }
            }
        });

        // Chart Filter Buttons
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                filterBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                fetchDashboardData(btn.dataset.period);
            });
        });

        // Initial Fetch
        fetchDashboardData('month');
    });
</script> -->


<script>
    let salesChart, categoryChart;

    async function fetchDashboardData(period = "month") {
        const queryParams = new URLSearchParams({
            period
        }).toString();

        try {
            const response = await fetch(`/admin/dashboard?${queryParams}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" },
            });

            if (response.status === 401 || response.status === 403) {
                Swal.fire({
                    icon: "error",
                    title: "Unauthorized",
                    text: "Please log in to continue",
                }).then(() => {
                    window.location.href = "/admin/login";
                });
                return;
            }

            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || "Failed to fetch dashboard data");
            }

            // Update Stats
            document.getElementById("netSale").innerHTML = `₹${Number(
                data.netSale
            ).toLocaleString("en-IN", {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
            })}`;
            document.getElementById("totalOrders").innerHTML = data.totalOrders;
            document.getElementById("totalCustomer").innerHTML = data.totalCustomers;
            document.getElementById("totalProduct").innerHTML = data.totalProducts;

            // Update Sales Chart
            salesChart.data.labels = data.salesChart.labels;
            salesChart.data.datasets[0].data = data.salesChart.data;
            salesChart.options.scales.x.title.text = `Sales by ${period.charAt(0).toUpperCase() + period.slice(1)}`;
            salesChart.options.scales.x.ticks.callback = function(value, index, values) {
                const label = this.getLabelForValue(value);
                if (period === "day") {
                    // For daily view, show hour (e.g., "14:00")
                    return label.split(" ")[1];
                } else if (period === "week" || period === "month") {
                    // For weekly/monthly view, show day (e.g., "2025-04-22" -> "22")
                    return label.split("-")[2];
                }
                return label; // For yearly view, show as is (e.g., "2025-04")
            };
            salesChart.update();

            // Update Category Chart
            categoryChart.data.labels = data.categoryChart.labels;
            categoryChart.data.datasets[0].data = data.categoryChart.data;
            categoryChart.update();

            // Update Best Selling Products
            const bestProducts = document.getElementById("bestProducts");
            bestProducts.innerHTML = data.bestProducts
                .map(
                    (product) => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${product.name || "N/A"}</h6>
                            <p>${product.categoryName || "N/A"}</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>${product.units || 0} units</span>
                    </div>
                </li>
            `
                )
                .join("");

            // Update Best Selling Categories
            const bestCategories = document.getElementById("bestCategories");
            bestCategories.innerHTML = data.bestCategories
                .map(
                    (category) => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${category.name || "N/A"}</h6>
                            <p>${category.products || 0} products</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>₹${Number(category.revenue || 0).toLocaleString("en-IN", {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2,
                        })}</span>
                    </div>
                </li>
            `
                )
                .join("");

            // Update Best Selling Brands
            const bestBrands = document.getElementById("bestBrands");
            bestBrands.innerHTML = data.bestBrands
                .map(
                    (brand) => `
                <li>
                    <div class="info">
                        <div>
                            <h6>${brand.name || "N/A"}</h6>
                            <p>${brand.categoryName || "N/A"}</p>
                        </div>
                    </div>
                    <div class="value">
                        <span>₹${Number(brand.revenue || 0).toLocaleString("en-IN", {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2,
                        })}</span>
                    </div>
                </li>
            `
                )
                .join("");

            // Update Recent Orders
            const recentOrders = document.getElementById("recentOrders");
            recentOrders.innerHTML = data.recentOrders
                .map(
                    (order) => `
                <tr>
                    <td>${order.orderId || "N/A"}</td>
                    <td>${order.customer || "N/A"}</td>
                    <td>${new Date(order.date || Date.now()).toLocaleDateString("en-US", {
                        month: "short",
                        day: "2-digit",
                        year: "numeric",
                    })}</td>
                    <td>₹${Number(order.amount || 0).toLocaleString("en-IN", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2,
                    })}</td>
                    <td><span class="badge bg-${getStatusClass(order.status)}">${
                        order.status || "N/A"
                    }</span></td>
                </tr>
            `
                )
                .join("");

            function getStatusClass(status) {
                switch (status) {
                    case "Completed":
                        return "success";
                    case "Processing":
                        return "warning text-dark";
                    case "Shipped":
                        return "primary";
                    case "Canceled":
                        return "danger";
                    default:
                        return "secondary";
                }
            }
        } catch (error) {
            console.error("Error fetching dashboard data:", error);
            Swal.fire({ icon: "error", title: "Error", text: error.message || "Failed to load dashboard data" });
        }
    }

    // Initialize Charts
    document.addEventListener("DOMContentLoaded", () => {
        const salesCtx = document.getElementById("salesChart").getContext("2d");
        salesChart = new Chart(salesCtx, {
            type: "line",
            data: {
                labels: [],
                datasets: [
                    {
                        label: "Sales",
                        data: [],
                        backgroundColor: "rgba(99, 102, 241, 0.1)",
                        borderColor: "#6366f1",
                        borderWidth: 2,
                        tension: 0.3,
                        pointBackgroundColor: "#fff",
                        pointBorderColor: "#6366f1",
                        pointBorderWidth: 2,
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: { borderDash: [2, 2] },
                        title: {
                            display: true,
                            text: "Revenue (₹)",
                        },
                    },
                    x: {
                        grid: { display: false },
                        title: {
                            display: true,
                            text: "Sales by Month",
                        },
                        ticks: {
                            callback: function(value, index, values) {
                                return this.getLabelForValue(value);
                            },
                        },
                    },
                },
                plugins: { legend: { display: false } },
            },
        });

        const categoryCtx = document.getElementById("categoryChart").getContext("2d");
        categoryChart = new Chart(categoryCtx, {
            type: "doughnut",
            data: {
                labels: [],
                datasets: [
                    {
                        data: [],
                        backgroundColor: ["#6366f1", "#10b981", "#3b82f6", "#f59e0b", "#ef4444"],
                        borderWidth: 0,
                        hoverOffset: 5,
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: "70%",
                plugins: { legend: { position: "bottom" } },
            },
        });

        // Chart Filter Buttons
        const filterBtns = document.querySelectorAll(".filter-btn");
        filterBtns.forEach((btn) => {
            btn.addEventListener("click", () => {
                filterBtns.forEach((b) => b.classList.remove("active"));
                btn.classList.add("active");
                fetchDashboardData(btn.dataset.period);
            });
        });

        // Initial Fetch
        fetchDashboardData("month");
    });
</script>

<%- include("../../views/partial/admin/footer.ejs") %>