<%- include ("../../views/partial/user/header") %>
<link rel="stylesheet" href="/style/user/home.css">
<link rel="stylesheet" href="/style/user/productDetails.css">

<style>
    .offers-wrapper {
        position: relative;
    }

    .offers-badge {
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        background-color: rgba(0, 123, 255, 0.1);
        border: 1px dashed #007bff;
        border-radius: 4px;
        color: #007bff;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        max-width: fit-content;
    }

    .offers-badge:hover {
        background-color: rgba(0, 123, 255, 0.15);
    }

    .offers-count {
        font-weight: 500;
    }

    .toggle-icon {
        font-size: 10px;
        transition: transform 0.3s ease;
    }

    .offers-badge[aria-expanded="true"] .toggle-icon {
        transform: rotate(180deg);
    }

    /* Offers Panel */
    .offers-panel {
        background-color: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        padding: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .offer-mini-item {
        display: flex;
        align-items: center;
        padding: 8px 10px;
        border-bottom: 1px solid var(--border-color);
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .offer-mini-item:last-child {
        border-bottom: none;
    }

    .offer-mini-item:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .offer-mini-item i:first-child {
        margin-right: 10px;
        width: 18px;
        text-align: center;
    }

    .offer-mini-info {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        line-height: 1.2;
    }

    .offer-mini-info span {
        font-size: 14px;
    }

    .offer-mini-info small {
        font-size: 12px;
    }

    /* No Offers Style */
    .no-offers {
        padding: 6px 12px;
        color: var(--text-color);
        opacity: 0.7;
        font-size: 14px;
    }

    /* Dark Mode Compatibility */
    [data-theme="dark"] .offers-badge {
        background-color: rgba(0, 123, 255, 0.2);
        border-color: rgba(0, 123, 255, 0.5);
    }

    [data-theme="dark"] .offers-panel {
        background-color: var(--card-bg);
        color: var(--text-color);
    }

    [data-theme="dark"] .offer-mini-item:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    [data-theme="dark"] .offer-mini-item {
        border-color: var(--border-color);
    }

    .modal-footer ,
    .modal-body {
        background-color: var(--card-bg);

    }

    .text-muted {
        color:var(--text-muted)!important;
    }

</style>

<style>
    /* Review section styles */
    .reviews-container {
        font-family: var(--bs-font-sans-serif);
    }
    
    .overall-rating {
        padding: 1rem;
        border-radius: 8px;
        background-color: var(--card-bg);
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .stars-large i {
        font-size: 1.5rem;
    }
    
    .rating-breakdown .progress {
        border-radius: 10px;
        background-color: rgba(0,0,0,0.1);
    }
    
    .review-filters .btn-group .btn {
        border-radius: 4px;
        margin-right: 4px;
    }
    
    .review-item {
        transition: all 0.2s ease;
        background-color: var(--card-bg);
    }
    
    .review-item:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }
    
    .review-title {
        font-weight: 600;
    }
    
    .review-content {
        color: var(--text-color);
    }
    
    .reviewer-info .avatar {
        border-radius: 50%;
        overflow: hidden;
    }
    
    /* Rating select interaction */
    .rating-select i {
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .rating-select i:hover,
    .rating-select i.active {
        color: #ffc107;
        transform: scale(1.1);
    }
    
    /* Dark mode compatibility */
    [data-theme="dark"] .review-item {
        border-color: var(--border-color);
    }
    
    [data-theme="dark"] .overall-rating {
        background-color: var(--card-bg);
    }
    
    [data-theme="dark"] .rating-breakdown .progress {
        background-color: rgba(255,255,255,0.1);
    }
    
    /* Responsive adjustments */
    @media (max-width: 576px) {
        .rating-select i {
            font-size: 1.25rem;
        }
        
        .review-filters .btn-group .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    }

    .modal-header {
        background-color: var(--card-bg);
    }

    .form-control {
        background-color: var(--card-bg);
        color: var(--text-color);
    }

    .form-control:focus {
        background-color: var(--search-row-border);
        color: var(--text-color);
    }
    .form-control::placeholder {
        color: var(--text-muted);
    }

    .active {
        --bs-btn-active-color: #fff ;
        --bs-btn-active-bg: #6c757d ;
        --bs-btn-active-border-color: #6c757d ;
        --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125) ;
    }
    </style>

<div class="container py-5">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <input type="hidden" id="currentProduct" value="<%= product._id %>" >
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/products?category=<%= product.category.name %>"><%= product.category.name %></a></li>
            <li class="breadcrumb-item active"><%= product.productName %></li>
        </ol>
    </nav>

    <div class="row mb-5">
        <!-- product-images  -->
        <div class="col-lg-6 mb-4 mb-lg-0">
            <div class="product-image-container mb-3">
                <div class="zoom-container">
                    <img src="/uploads/products/<%= product.cardImage %>" id="mainImage" 
                         class="img-fluid" alt="<%= product.productName %>">
                    <div class="zoom-lens"></div>
                    <div class="zoom-instructions position-absolute bottom-0 end-0 p-2 bg-black bg-opacity-50 text-white rounded-start">
                        <i class="fas fa-search-plus me-1"></i> Hover to zoom
                    </div>
                    <% if ( availableOffers.length  > 0) { %>
                        <div class="position-absolute top-0 start-0 bg-danger text-white py-1 px-2 m-2 rounded">
                            SALE
                        </div>
                    <% } %>
                </div>
            </div>  
            <div class="row thumbnail-gallery g-2">
                <% product.productImages.forEach((img, index) => { %>
                    <div class="col-3">
                        <img src="/uploads/products/<%= img %>" 
                             class="img-fluid thumbnail <%= index === 0 ? 'active' : '' %>" 
                             alt="Thumbnail <%= index + 1 %>" 
                            onclick="changeMainImage(this)">
                    </div>
                <% }) %>
            </div>
        </div>
        <!-- Product Details -->
        <div class="col-lg-6">
            <h1 class="product-title mb-2"><%= product.productName %></h1>
            <div class="ratings mb-3">
                <span class="stars">
                    <% 
                        const rating = parseFloat(product.ratingsSummary.averageRating);
                        for (let i = 1; i <= 5; i++) {
                            if (i <= rating) { %>
                                <i class="fas fa-star text-warning"></i>
                            <% } else if (i - 0.5 <= rating) { %>
                                <i class="fas fa-star-half-alt text-warning"></i>
                            <% } else { %>
                                <i class="far fa-star text-warning"></i>
                            <% }
                        }
                    %>
                                
                </span>
                <span class="rating-value ms-2"><%= rating.toFixed(1) %></span>
                <span class="reviews-count ms-2">(<%= (product.ratingsSummary.totalReviews) || "N/A" %>)</span>
            </div>
            <!-- Stock Status -->
            <div class="stock-status  mb-3 ">
                <input id="productQuanity" type="hidden" value="<%= product.quantity  %>">
            <% if (product.status === 'Available' && product.quantity > 0) { %>
                <span class="badge bg-success">In Stock</span>
                <span id="counts" class="text-muted ms-2">Only <%= product.quantity %> left</span>
            <% } else if (product.status === 'Out of stock') { %>
                <span class="badge bg-warning">Out of Stock</span>
            <% } %>
        </div>
            <!-- Price and Discounts -->
            <div class="price-section mb-4">
                <div class="current-price fs-3 fw-bold">₹<%=  finalPrice.toFixed(2)  %></div>
                <% if (product.regularPrice >  finalPrice) { %>
                    <div class="original-price text-decoration-line-through">₹<%= product.regularPrice.toFixed(2) %></div>
                    <div class="saving-badge bg-success text-white d-inline-block px-2 py-1 rounded mt-2">
                        Save ₹<%= (product.regularPrice -  finalPrice).toFixed(2) %> (<%= Math.round(((product.regularPrice - finalPrice ) / product.regularPrice) * 100) %>%)
                    </div>
                <% } %>
                <% if ( bestOffer?.amount  > 0) { %>
                    <div class="coupon-alert alert d-flex align-items-center mt-2" role="alert">
                        <i class="fas fa-tag me-2"></i>
                        <div>
                            <% if (bestOffer.type === 'product') { %>
                                Product discount applied!
                            <% } else if (bestOffer.type === 'category') { %>
                                <%= product.category.categoryOffer %>% category discount applied!
                            <% } else if (bestOffer.type === 'brand') { %>
                                <%= product.brand.brandOffer %>% brand discount applied!
                            <% } else { %>
                                Special offer applied!
                            <% } %>
                        </div>
                    </div>
                <% } %>
            </div>

            <% if ( availableOffers?.length > 0 )  { %>
                <div class="offers-wrapper mb-3">
                    <div class="offers-badge" id="offersToggle" data-bs-toggle="collapse" href="#offersCollapse" role="button" aria-expanded="false" aria-controls="offersCollapse">
                        <i class="fas fa-tags me-1"></i> 
                        <span class="offers-count">
                            <%= availableOffers.length %> Offer<%= availableOffers.length > 1 ? 's' : '' %> Available
                        </span> 
                        <i class="fas fa-chevron-down ms-1 toggle-icon"></i>
                    </div>
                    
                    <!-- Collapsible Offers Panel -->
                    <div class="collapse mt-2" id="offersCollapse">
                        <div class="offers-panel">
                            <% availableOffers.forEach((offer, index) => { %>
                                <div class="offer-mini-item <%= offer.isSpecial ? 'special-offer' : '' %>" 
                                    <% if(offer.isSpecial) { %>
                                        data-bs-toggle="modal" data-bs-target="#offerModal<%= index %>"
                                    <% } %>
                                >
                                    <% if (offer.type === 'product') { %>
                                        <i class="fas fa-box text-success"></i>
                                    <% } else if (offer.type === 'category') { %>
                                        <i class="fas fa-list text-primary"></i>
                                    <% } else if (offer.type === 'brand') { %>
                                        <i class="fas fa-copyright text-warning"></i>
                                    <% } else { %>
                                        <i class="fas fa-percentage text-danger"></i>
                                    <% } %>
                                    <div class="offer-mini-info">
                                        <span><%= offer.name %></span>
                                        <% if (offer.isSpecial && offer.endDate) { %>
                                            <small class="text-muted">Valid till <%= new Date(offer.endDate).toLocaleDateString() %></small>
                                        <% } %>
                                    </div>
                                    <% if (offer.isSpecial) { %>
                                        <i class="fas fa-chevron-right text-muted"></i>
                                    <% } %>
                                </div>
                                <div class="modal fade" id="offerModal<%= index %>" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                        <div class="modal-header bg-success text-white">
                                            <h5 class="modal-title">
                                                <i class="fas fa-tag me-2"></i> <%= offer.name %>
                                            </h5>
                                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="offer-details">
                                                <div class="mb-3">
                                                    <small class="text-muted">Offer Type</small>
                                                    <p class="mb-1">
                                                        <% if (offer.type === 'Percentage') { %>
                                                            <span class="badge bg-success">Percentage Discount</span>
                                                        <% } else { %>
                                                            <span class="badge bg-primary">Fixed Discount</span>
                                                        <% } %>
                                                    </p>
                                                </div>
                                                <div class="mb-3">
                                                    <small class="text-muted">Discount</small>
                                                    <p class="mb-1 fs-4 fw-bold text-danger">
                                                        <%= offer.type === 'Percentage' ?  Math.round(((product.regularPrice - finalPrice ) / product.regularPrice) * 100)  + "% OFF" : offer.discount.toFixed(2) + " OFF" %>
                                                    </p>
                                                </div>
                                                <div class="mb-3">
                                                    <small class="text-muted">Description</small>
                                                    <p class="mb-1"><%= offer.description %></p>
                                                </div>
                                                <div class="mb-3">
                                                    <small class="text-muted">Valid Period</small>
                                                    <p class="mb-1"><%= new Date(offer.endDate).toLocaleDateString() %></p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <% }) %>
                        </div>
                    </div>
                </div>
            <%  } %>

            <% if (product.status === 'Available' && product.quantity > 0 ) { %>
                <div class="purchase-options mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-4 mb-3 mb-md-0">
                            <label for="quantity" class="form-label">Quantity</label>
                            <div class="input-group">
                                <button class="btn btn-outline-secondary" type="button" id="quantity-minus">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="number" class="form-control text-center" id="quantity" value="1" min="1" max="<%= product.quantity %>">
                                <button class="btn btn-outline-secondary" type="button" id="quantity-plus">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row g-2 product-actions">
                    <div class="col-md-6">
                        <button class="btn btn-add-to-cart w-100" onclick="addToCart('<%= product._id %>')">
                            <i class="fa fa-shopping-cart me-2"></i>Add to Cart
                        </button>
                    </div>
                    <div class="col-md-6">
                        <button class="btn btn-wishlist  w-100" id="addtoWishlist"  onclick="addtoWishlist('<%= product._id %>')" data-product-id = "<%= product._id %>">
                            <i class="fa fa-heart me-2"></i>Add to Wishlist
                        </button>
                    </div>
                </div>
            <% } else if(product.status === "Out of stock") { %>
                <div class="purchase-options mb-4">
                    <div class="row align-items-center">
                        <div class="alert alert-warning">
                            This product is currently out of stock. <a href="/products" class="alert-link">Browse other products</a>.
                        </div>
                    </div>
                </div>
                <div class="row g-2 product-actions">
                    <div class="col-md-6">
                        <button class="btn btn-wishlist  w-100" id="addtoWishlist"  onclick="addtoWishlist('<%= product._id %>')" data-product-id = "<%= product._id %>">
                            <i class="fa fa-heart me-2"></i>Add to Wishlist
                        </button>
                    </div>
                </div>
            <%}else { %>   
                <div class="alert alert-danger">
                    This product is currently unavailable. <a href="/products" class="alert-link">Browse other products</a>.
                </div>
            <% } %>
            <!-- Highlights -->
            <div class="product-highlights mb-4">
                <h5 class="mb-3">Highlights</h5>
                <ul class="list-group list-group-flush">
                    <% product.specifications.slice(0, 3).forEach(spec => { %>
                        <li class="list-group-item"><%= spec.name %> : <%= spec.value %></li>
                    <% }) %>
                </ul>
            </div>
            <!-- Social Share -->
            <div class="product-share mt-4">
                <span>Share:</span>
                <a href="#" class="social-icon"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
                <a href="#" class="social-icon"><i class="fab fa-whatsapp"></i></a>
            </div>
        </div>
    </div>

    <!-- Product Tabs -->
    <div class="product-tabs mb-5">
        <ul class="nav nav-tabs" id="productTabs" role="tablist">
            <li class="nav-item">
                <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button">Description</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" id="specifications-tab" data-bs-toggle="tab" data-bs-target="#specifications" type="button">Specifications</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" id="reviews-tab" data-bs-toggle="tab" data-bs-target="#reviews" type="button">Reviews </button>
            </li>
            <li class="nav-item">
                <button class="nav-link" id="shipping-tab" data-bs-toggle="tab" data-bs-target="#shipping" type="button">Shipping & Returns</button>
            </li>
        </ul>
        <div class="tab-content p-4 border border-top-0 rounded-bottom">
            <div class="tab-pane fade show active" id="description">
                <h4><%= product.productName %></h4>
                <p><%= product.description %></p>
            </div>
            <div class="tab-pane fade" id="specifications">
                <h5 class="mb-3">Product Specifications</h5>
                <table class="table table-striped">
                    <tbody>
                        <% product.specifications.forEach(specification => { %>
                            <tr>
                                <th scope="row"><%= specification.name %></th>
                                <td><%= specification.value %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
            <div class="tab-pane fade" id="reviews">
                <div class="reviews-container">
                    <div class="review-summary mb-4">
                        <div class="row align-items-center">
                            <div class="col-md-4 text-center mb-3 mb-md-0">
                                <div class="overall-rating">
                                    <h2 class="display-4 fw-bold mb-0"><%= rating.toFixed(1) %></h2>
                                    <div class="stars-large mb-2">
                                        <% 
                                            for (let i = 1; i <= 5; i++) {
                                                if (i <= rating) { %>
                                                    <i class="fas fa-star text-warning"></i>
                                                <% } else if (i - 0.5 <= rating) { %>
                                                    <i class="fas fa-star-half-alt text-warning"></i>
                                                <% } else { %>
                                                    <i class="far fa-star text-warning"></i>
                                                <% }
                                            }
                                        %>
                                    </div>
                                    <%  if ( product.ratingsSummary.totalReviews > 0 ) { %>
                                        <p class="text-muted">Based on <%= (product.ratingsSummary.totalReviews)  %> reviews</p>
                                    <% } %>
                                    
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="rating-breakdown">
                                    <div class="rating-bar d-flex align-items-center mb-2">
                                        <div class="rating-label me-2">5 <i class="fas fa-star text-warning small"></i></div>
                                        <div class="progress flex-grow-1" style="height: 8px;">
                                            <div class="progress-bar " role="progressbar"  data-percentage="<%= ratingsSummary.percentage['5'] %>"></div>
                                        </div>
                                        <div class="rating-count ms-2"><%= ratingsSummary.count["5"] %>
                                        </div>
                                    </div>
                                    <div class="rating-bar d-flex align-items-center mb-2">
                                        <div class="rating-label me-2">4 <i class="fas fa-star text-warning small"></i></div>
                                        <div class="progress flex-grow-1" style="height: 8px;">
                                            <div class="progress-bar " role="progressbar" 
                                            data-percentage="<%= ratingsSummary.percentage['4'] %>"></div>
                                        </div>
                                        <div class="rating-count ms-2"><%= ratingsSummary.count["4"] %></div>
                                    </div>
                                    <div class="rating-bar d-flex align-items-center mb-2">
                                        <div class="rating-label me-2">3 <i class="fas fa-star text-warning small"></i></div>
                                        <div class="progress flex-grow-1" style="height: 8px;">
                                            <div class="progress-bar " role="progressbar"   data-percentage="<%= ratingsSummary.percentage['3'] %>"></div>
                                        </div>
                                        <div class="rating-count ms-2"><%= ratingsSummary.count["3"]  %></div>
                                    </div>
                                    <div class="rating-bar d-flex align-items-center mb-2">
                                        <div class="rating-label me-2">2 <i class="fas fa-star text-warning small"></i></div>
                                        <div class="progress flex-grow-1" style="height: 8px;">
                                            <div class="progress-bar " role="progressbar"   data-percentage="<%= ratingsSummary.percentage['2'] %>"></div>
                                        </div>
                                        <div class="rating-count ms-2"><%= ratingsSummary.count["2"]  %></div>
                                    </div>
                                    <div class="rating-bar d-flex align-items-center">
                                        <div class="rating-label me-2">1 <i class="fas fa-star text-warning small"></i></div>
                                        <div class="progress flex-grow-1" style="height: 8px;">
                                            <div class="progress-bar " role="progressbar"  data-percentage="<%= ratingsSummary.percentage['1'] %>"></div>
                                        </div>
                                        <div class="rating-count ms-2"><%= ratingsSummary.count["1"]  %></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Review Filters -->
                    <div class="review-filters mb-4">
                        <div class="d-flex flex-wrap align-items-right text-end">
                            <div class="sort-options ">
                                <select class="form-select form-select-sm" id="typeFilter">
                                    <option value="recent">Most Recent</option>
                                    <option value="highlyRated">Highest Rated</option>
                                    <option value="lowestRated">Lowest Rated</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Review List -->
                    <div class="review-list" id="reviewList">
                        <!-- dynamicaly populated  --> 
                    </div>

                    <div class="text-center mt-4">
                        <button id="loadMoreReviews" class="btn btn-outline-primary px-4">
                            <i class="fas fa-spinner me-2"></i> Load More Reviews
                        </button>
                    </div>

                    <!-- Write a Review section -->
                    <div class="write-review-section mt-5">
                        <h4 class="mb-3">Write a Review</h4>
                        <form id="reviewForm">
                            <div class="mb-3">
                                <label class="form-label">Your Rating</label>
                                <div class="rating-select">
                                    <i class="far fa-star fs-4 me-1 rating-star" data-rating="1"></i>
                                    <i class="far fa-star fs-4 me-1 rating-star" data-rating="2"></i>
                                    <i class="far fa-star fs-4 me-1 rating-star" data-rating="3"></i>
                                    <i class="far fa-star fs-4 me-1 rating-star" data-rating="4"></i>
                                    <i class="far fa-star fs-4 me-1 rating-star" data-rating="5"></i>
                                </div>
                                <input type="hidden" name="rating">
                                <div class="invalid-feedback review "></div>
                            </div>
                            <div class="mb-3">
                                <label for="reviewTitle" class="form-label">Review Title</label>
                                <input type="text" class="form-control" id="reviewTitle" name="reviewTitle" placeholder="Summarize your experience">
                                <div class="invalid-feedback reviewTitle"></div>
                            </div>
                            <div class="mb-3">
                                <label for="reviewContent" class="form-label">Your Review</label>
                                <textarea class="form-control" id="reviewContent" name="reviewText" rows="4" placeholder="Tell us what you liked or disliked about this product"></textarea>
                                <div class="invalid-feedback reviewText"></div>
                            </div>
                            <button type="submit" class="btn btn-primary">Submit Review</button>
                        </form>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="shipping">
                <h4>Shipping Information</h4>
                <p>We offer multiple shipping options to meet your needs:</p>
                <ul>
                    <li><strong>Standard Shipping:</strong> 3-5 business days (Free on orders over $50)</li>
                    <li><strong>Express Shipping:</strong> 1-2 business days ($15.99)</li>
                    <li><strong>Next Day Delivery:</strong> Next business day if ordered before 2PM ($25.99)</li>
                </ul>
                <h4 class="mt-4">Return Policy</h4>
                <p>We want you to be completely satisfied with your purchase. If you're not, we offer a hassle-free return policy:</p>
                <ul>
                    <li>Returns accepted within 30 days of delivery</li>
                    <li>Item must be in original packaging and unused condition</li>
                    <li>Free return shipping for defective items</li>
                    <li>Refunds processed within 5-7 business days after receiving the returned item</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Related Products -->
    <div class="related-products mb-5">
        <h3 class="section-title">You Might Also Like</h3>
        <div class="row">
            <% relatedProducts.forEach(related => { %>
                <div class="col-md-6 col-lg-4 col-xl-3 mt-3">
                    <a href="/product/<%= related._id %>" class="product-link">
                        <div class="product-card">
                            <div class="image-container">
                                <img src="/uploads/products/<%= related.cardImage %>" alt="Product Image">
                            </div>
                            <h4><%= related.category.name %></h4>
                            <h3><%= related.productName %></h3>
                            <div class="ratings ">
                                <span class="stars">
                                    <% 
                                        let ratings = parseFloat(related.rating) 
            
                                        for (let i = 1; i <= 5; i++) {
                                            if (i <= ratings) { %>
                                                <i class="fas fa-star text-warning"></i>
                                            <% } else if (i - 0.5 <= ratings) { %>
                                                <i class="fas fa-star-half-alt text-warning"></i>
                                            <% } else { %>
                                                <i class="far fa-star text-warning"></i>
                                            <% }
                                        }
                                    %>              
                                </span>
                                <span class="rating-value ms-2"><%= ratings.toFixed(1) %></span>
                            </div>
                            <p class="price"><%= related.salePrice %>
                            <% if(related.regularPrice > related.salePrice) { %>
                            <del class="mx-3"><%= related.regularPrice %></del></p>
                            <% } %>
                        </div>
                    </a>
                </div>
            <% }) %>
        </div>
    </div>
</div>


!-- Edit Review Modal -->
<div class="modal fade" id="editReviewModal" tabindex="-1" aria-labelledby="editReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editReviewModalLabel">Edit Your Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editReviewForm">
                    <div class="mb-3">
                        <label class="form-label">Your Rating</label>
                        <div class="rating-select edit-rating-select">
                            <i class="far fa-star fs-4 me-1 edit-rating-star" data-rating="1"></i>
                            <i class="far fa-star fs-4 me-1 edit-rating-star" data-rating="2"></i>
                            <i class="far fa-star fs-4 me-1 edit-rating-star" data-rating="3"></i>
                            <i class="far fa-star fs-4 me-1 edit-rating-star" data-rating="4"></i>
                            <i class="far fa-star fs-4 me-1 edit-rating-star" data-rating="5"></i>
                        </div>
                        <input type="hidden" name="rating" id="editRatingInput">
                        <div class="invalid-feedback edit-review-rating"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editReviewTitle" class="form-label">Review Title</label>
                        <input type="text" class="form-control" id="editReviewTitle" name="reviewTitle" placeholder="Summarize your experience">
                        <div class="invalid-feedback edit-review-title"></div>
                    </div>
                    <div class="mb-3">
                        <label for="reviewContent" class="form-label">Your Review</label>
                        <textarea class="form-control" name="reviewText" id="editReviewText" rows="4" placeholder="Tell us what you liked or disliked about this product"></textarea>
                        <div class="invalid-feedback reviewText"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="editReviewForm" class="btn btn-primary" >Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteReviewModal" tabindex="-1" aria-labelledby="deleteReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteReviewModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this review? This action cannot be undone.</p>
                <input type="hidden" id="deleteReviewId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteReviewBtn">Delete Review</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>

document.addEventListener('DOMContentLoaded', function() {

    const editRatingStars = document.querySelectorAll('.edit-rating-star');
    editRatingStars.forEach(star => {
        star.addEventListener('click', function() {
            const rating = parseInt(this.getAttribute('data-rating'));
            document.getElementById('editRatingInput').value = rating;
            
            // Update star appearance
            editRatingStars.forEach(s => {
                if (parseInt(s.getAttribute('data-rating')) <= rating) {
                    s.classList.remove('far');
                    s.classList.add('fas');
                    s.classList.add('active');
                } else {
                    s.classList.remove('fas');
                    s.classList.add('far');
                    s.classList.remove('active');
                }
            });
        });
    });

    const editReviewModal = document.getElementById('editReviewModal');
    let reviewId ;
    editReviewModal.addEventListener('show.bs.modal', (event) => {
        const button = event.relatedTarget;
        reviewId = button.getAttribute('data-id');
        const form = document.getElementById('editReviewForm');

        form.elements['rating'].value = button.getAttribute('data-rating');
        form.elements['reviewTitle'].value = button.getAttribute('data-title');
        form.elements['reviewText'].value = button.getAttribute('data-feedback');
    });
    // edit review
    const editReviewForm = document.getElementById('editReviewForm');
    editReviewForm.addEventListener('submit',async (e) => {
        e.preventDefault();
        clearErrors(editReviewForm);

        const formData = new FormData(editReviewForm);
        const jsonData = Object.fromEntries(formData);
        // trim all values 
        Object.keys(jsonData).forEach(key => {
            if (typeof jsonData[key] === 'string') {
                jsonData[key] = jsonData[key].trim();
            }
        });
        console.log("edit form data:",jsonData);
        try {
            const response = await fetch(`/product/editReview/${reviewId}`, {
                method: 'PATCH',
                body: JSON.stringify(jsonData),
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();
            if (!response.ok || !data.success) {
                displayFormErrors(editReviewForm, data.errors);
                Swal.fire('Error', data.message || 'Invalid form validations..!', 'error');
            } else {
                bootstrap.Modal.getInstance(document.getElementById('editReviewModal')).hide();
                Swal.fire({
                    title: 'Success',
                    text:  data.message || 'Review edited successfully',
                    icon: 'success',
                    timer: 1200,
                    showConfirmButton: "OK"
                })
                .then(() => location.reload());
            }
        } catch (error) {
            console.error('edit review error:', error);
            Swal.fire('Error', 'Something went wrong: ' + error.message, 'error');
        }
    });


    // delete review 
    const deleteReviewModal = document.getElementById('deleteReviewModal');
    deleteReviewModal.addEventListener('show.bs.modal', (event) => {
        const button = event.relatedTarget;
        reviewId = button.getAttribute('data-id');
    });

    document.getElementById("confirmDeleteReviewBtn").
      addEventListener("click",async ()=> {
        try {
            const response = await fetch(`/product/deleteReview/${reviewId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();
            if (!response.ok || !data.success) {
                Swal.fire('Error', data.message || 'Unable to delete Review..', 'error');
            } else {
                bootstrap.Modal.getInstance(document.getElementById('deleteReviewModal')).hide();
                Swal.fire({
                    title: 'Success',
                    text:  data.message || 'Review deleted successfully',
                    icon: 'success',
                    timer: 1200,
                    showConfirmButton: "OK"
                })
                .then(() => location.reload());
            }
        } catch (error) {
            console.error('delete Review error:', error);
            Swal.fire('Error', 'Something went wrong: ' + error.message, 'error');
        }
    })


    // Star rating selection
    let selectedRating = 0;
    const ratingStars = document.querySelectorAll(".rating-star");
    ratingStars.forEach(star => {
        star.addEventListener('click', function() {
            const rating = this.getAttribute('data-rating');
            selectedRating = rating;
            
            // Reset all stars
            ratingStars.forEach(s => {
                s.classList.remove('fas', 'active');
                s.classList.add('far');
            });
            
            // Fill stars up to selected rating
            for (let i = 0; i < rating; i++) {
                ratingStars[i].classList.remove('far');
                ratingStars[i].classList.add('fas', 'active');
            }
        });
        
        // Hover effect
        star.addEventListener('mouseover', function() {
            const rating = this.getAttribute('data-rating');
            
            // Fill stars up to hovered rating
            for (let i = 0; i < rating; i++) {
                ratingStars[i].classList.remove('far');
                ratingStars[i].classList.add('fas');
            }
        });
        
        star.addEventListener('mouseout', function() {
            // Reset to active state only
            ratingStars.forEach(s => {
                if (!s.classList.contains('active')) {
                    s.classList.remove('fas');
                    s.classList.add('far');
                }
            });
        });
    });
    

    const productId = document.getElementById("currentProduct").value;
    let currentPage = 1;
    const reviewsPerPage = 5;
    let isLoading = false;
    let hasMoreReviews = true;

    //  reviews tab 
    const reviewsTab = document.getElementById('reviews-tab');
    reviewsTab.addEventListener('click', function() {
        currentPage = 1;
        hasMoreReviews = true;
        
        // Clear existing reviews
        const reviewList = document.getElementById("reviewList");
        reviewList.innerHTML = '';
        
        // Fetch initial reviews
        fetchReviews();
    });

    //  the filter 
    const typeFilter = document.getElementById('typeFilter');
    typeFilter.addEventListener('change', function() {
        currentPage = 1;
        hasMoreReviews = true;
        
        const reviewList = document.getElementById("reviewList");
        reviewList.innerHTML = '';

        fetchReviews();
    });

    // Load more reviews button
    const loadMoreBtn = document.getElementById('loadMoreReviews');
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', function() {
            if (isLoading || !hasMoreReviews) return;
            
            // Increment page number
            currentPage++;
            
            // Show loading state
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Loading...';
            
            // Fetch next page of reviews
            fetchReviews(false);
        });
    }


    document.querySelectorAll(".progress-bar").forEach(bar => {
        const percentage = parseFloat(bar.dataset.percentage) || 0;
        bar.style.width = percentage + "%";

        if (percentage >= 50) {
            bar.classList.add("bg-success");
        } else if (percentage >= 20) {
            bar.classList.add("bg-warning");
        } else {
            bar.classList.add("bg-danger");
        }
    });

    // fetch reviews
    async function fetchReviews(resetList = true) {
        if (isLoading) return;
        isLoading = true;
        
        const type = document.getElementById('typeFilter').value;
        const queryParams = new URLSearchParams({
            type,
            page: currentPage,
            limit: reviewsPerPage
        }).toString();
        
        try {
            // Show loading state on button
            if (loadMoreBtn) {
                loadMoreBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Loading...';
            }
            
            const response = await fetch(`/product/${productId}/reviews?${queryParams}`, {
                headers: {'X-Requested-With': 'XMLHttpRequest'},
            });
            const data = await response.json();

            console.log("data" , data)
            if (!response.ok) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to fetch reviews',
                });
                return;
            }

            const reviewList = document.getElementById("reviewList");
            
            const currentUserId =  data.user === undefined ?  undefined : data.user._id ;

            // Check if we have reviews
            if (data.reviews?.length > 0) {
                hasMoreReviews = data.hasMore;

                const reviewsHTML = data.reviews.map(review => {
                    // star
                    const starRating = generateStarRating(review.rating);  
                    // Format date
                    const reviewDate = new Date(review.createdAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                    
                    // username icon
                    const userInitials = review.user?.username ? review.user.username.substring(0, 1).toUpperCase() : 'U';
   
                    // Profile 
                    const profileImage = review.user?.profileImage 
                        ? `<img src="/uploads/user/profileimages/${review.user.profileImage}" style="width: 100%; height: 100%; object-fit: cover;" class="rounded-circle" />`
                        : userInitials;
                    
                    const isLiked = review.votedUsers.findIndex(id => id === currentUserId );

                    return `
                        <div class="review-item p-3 mb-3 border rounded">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div class="reviewer-info d-flex align-items-center">
                                    <div class="avatar me-2">
                                        <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                            ${profileImage}
                                        </div>
                                    </div>
                                    <div>
                                        <h6 class="mb-0">${review.user?.username || 'Anonymous'}</h6>
                                        <div class="text-muted small">${review.verifiedPurchase ? 'Verified Purchase' : ''}</div>
                                    </div>
                                </div>
                                <div class="review-date text-muted small">${reviewDate}</div>
                            </div>
                            <div class="rating mb-2">
                                ${starRating}
                                <span class="ms-1 fw-bold">${review.rating.toFixed(1)}</span>
                            </div>
                            <h5 class="review-title mb-2">${review.title}</h5>
                            <div class="review-content mb-3">
                                <p>${review.feedback}</p>
                            </div>
                            <div class="d-flex align-items-center justify-content-between review-actions">
                                <button class="btn btn-sm btn-outline-secondary helpful-btn ${isLiked !== -1  ? "active" : "" } " ${!currentUserId ? "disabled" : "" } data-id="${review._id}">
                                    <i class="far fa-thumbs-up me-1"></i> Helpful (${review.votedUsers.length }) 
                                </button>
                                ${currentUserId === review.user?._id ? `
                                    <div class="review-owner-actions">
                                        <button class="btn btn-sm btn-outline-primary me-2 edit-review-btn " 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#editReviewModal" 
                                        data-id="${review._id}" 
                                        data-rating="${review.rating}" 
                                        data-title="${review.title}" 
                                        data-feedback="${review.feedback}" >
                                            <i class="fas fa-edit me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger delete-review-btn" 
                                            data-bs-toggle="modal" data-bs-target="#deleteReviewModal" 
                                            data-id="${review._id}">
                                            <i class="fas fa-trash-alt me-1"></i> Delete
                                        </button>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    `;
                }).join('');
                
                // Add the new reviews to the list
                if (resetList) {
                    reviewList.innerHTML = reviewsHTML;
                } else {
                    reviewList.innerHTML += reviewsHTML;
                }
                
                // Set up helpful vote buttons
                setupHelpfulButtons();
                
                // Update load more button visibility
                loadMoreBtn.style.display = hasMoreReviews ? 'inline-block' : 'none';
            } else if (resetList) {
                // No reviews found
                reviewList.innerHTML = `
                    <div class="alert alert-info">
                        No reviews found for this product. Be the first to write a review!
                    </div>
                `;
                loadMoreBtn.style.display = 'none';
            }
            
            // Reset button state
            if (loadMoreBtn) {
                loadMoreBtn.innerHTML = '<i class="fas fa-spinner me-2"></i> Load More Reviews';
            }
            
        } catch (error) {
            console.error('Error fetching reviews:', error);
            Swal.fire({ 
                icon: 'error', 
                title: 'Error', 
                text: error.message || 'Failed to load reviews' 
            });
        } finally {
            isLoading = false;
        }
    }

    //  generate star 
    function generateStarRating(rating) {
        let stars = '';
        for (let i = 1; i <= 5; i++) {
            if (i <= rating) {
                stars += '<i class="fas fa-star text-warning"></i>';
            } else if (i - 0.5 <= rating) {
                stars += '<i class="fas fa-star-half-alt text-warning"></i>';
            } else {
                stars += '<i class="far fa-star text-warning"></i>';
            }
        }
        return stars;
    }

    setupHelpfulButtons() 

    // vote like
    function setupHelpfulButtons() {
        const helpfulButtons = document.querySelectorAll('.helpful-btn');
        helpfulButtons.forEach(button => {
            button.addEventListener('click', async function() {
                reviewId = button.getAttribute('data-id');
                 
                try {
                    const response = await fetch(`/product/review/like/${reviewId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok || !data.success) {
                        displayFormErrors(reviewForm, data.errors);
                        Swal.fire({
                                title: 'Error',
                                text:  data.message || 'Failed to load reviews',
                                icon: 'error',
                                timer: 1200,
                                showConfirmButton: "OK"
                            })
                        .then(()=>{
                            if(data.redirectUrl){
                                location.href = data.redirectUrl;
                            }
                        })
                    }else {
                        this.innerHTML = `<i class="fas fa-thumbs-up me-1"></i> Helpful (${data.review?.votedUsers?.length})`;
                        this.classList.toggle('active');
                    }

                } catch (error) {
                    console.error('Error voting for review:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to vote for this review'
                    });
                }
            });
        });
    }

    // // Load more reviews functionality
    // const loadMoreBtn = document.getElementById('loadMoreReviews');
    // if (loadMoreBtn) {
    //     loadMoreBtn.addEventListener('click', function() {
    //         // Simulate loading
    //         this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Loading...';
            
    //         // Simulate delay for demo purposes
    //         setTimeout(() => {
    //             const reviewList = document.querySelector('.review-list');
                
    //             // Create new review items (just duplicating the first one for demo)
    //             const firstReview = document.querySelector('.review-item');
    //             const newReview = firstReview.cloneNode(true);
                
    //             // Change some details to make it look different
    //             const nameElement = newReview.querySelector('.reviewer-info h6');
    //             nameElement.textContent = 'Emma Williams';
                
    //             const dateElement = newReview.querySelector('.review-date');
    //             dateElement.textContent = 'January 20, 2025';
                
    //             const avatarText = newReview.querySelector('.rounded-circle');
    //             avatarText.textContent = 'EW';
    //             avatarText.classList.remove('bg-primary');
    //             avatarText.classList.add('bg-info');
                
    //             // Add to the list
    //             reviewList.appendChild(newReview);
                
    //             // Reset button
    //             this.innerHTML = '<i class="fas fa-spinner me-2"></i> Load More Reviews';
    //         }, 1000);
    //     });
    // }

    
    // add Form submission
    const reviewForm = document.getElementById('reviewForm');
    if (reviewForm) {
        reviewForm.addEventListener('submit',async function(e) {
            e.preventDefault();
            clearErrors(reviewForm);

            const formData = new FormData(reviewForm);
            const jsonData = Object.fromEntries(formData);
            jsonData.rating = selectedRating;

            Object.keys(jsonData).forEach(key => {
                if (typeof jsonData[key] === 'string') {
                    jsonData[key] = jsonData[key].trim();
                }
            });

            try { 
                const response = await fetch(`/product/addReview/${productId}`, {
                    method: 'POST',
                    body: JSON.stringify(jsonData),
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();
                if (!response.ok || !data.success) {
                    displayFormErrors(reviewForm, data.errors);
                    Swal.fire({
                            title: 'Error',
                            text:  data.message || 'Invalid form validations..!',
                            icon: 'error',
                            timer: 1200,
                            showConfirmButton: "OK"
                        })
                    .then(()=>{
                        if(data.redirectUrl){
                            location.href = data.redirectUrl;
                        }
                    })
                } else {
                    Swal.fire('Success', 'Address added successfully', 'success')
                        .then(() =>  resetForm(reviewForm)) 
                        .then(()=> location.reload());
                }
            } catch (error) {
                console.error('Add address error:', error);
                Swal.fire('Error', 'Something went wrong: ' + error.message, 'error');
            }
        });
    }

    function resetForm(form){
        form.reset();
        ratingStars.forEach(s => {
            s.classList.remove('fas', 'active');
            s.classList.add('far');
        });
    }
});

        function displayFormErrors(form, errors) {
            clearErrors(form);
            if (errors && typeof errors === 'object') {
                Object.entries(errors).forEach(([field, message]) => {
                    const input = form.querySelector(`[name="${field}"]`);
                    if (input) {
                        input.classList.add('is-invalid');
                        const feedback = input.nextElementSibling;
                        if (feedback?.classList.contains('invalid-feedback')) {
                            feedback.textContent = message;
                        }
                    }
                });
            }
        } 

        function clearErrors(form) {
            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            form.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

</script>

<script>
    
    function changeMainImage(thumbnail) {
        const mainImage = document.getElementById('mainImage');
        if (mainImage) {
            mainImage.src = thumbnail.src;
            document.querySelectorAll('.thumbnail').forEach(thumb => thumb.classList.remove('active'));
            thumbnail.classList.add('active');
        }
    }

    // Define addToCart globally
    function addToCart(productId) {
        const quantityInput = document.getElementById("quantity");
        const quantity = quantityInput ? quantityInput.value : 1; 
        fetch("/cart/add", {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, quantity })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message || 'Product added to cart successfully!',
                    timer: 1000,
                    showConfirmButton: false
                });
            } else if (data.redirect) {
                window.location.href = data.redirect;
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Error adding to cart',
                    timer: 1000,
                    showConfirmButton: false
                });
            }
        })
        .catch(err => {
            console.error('Error:', err);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred. Please try again.',
                timer: 1000,
                showConfirmButton: false
            });
        });
    }

    // Define addToCart globally
    function addtoWishlist(productId) {
        fetch("/wishlist/add", {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message || 'Product added to wishlist successfully!',
                    timer: 1200,
                    showConfirmButton: "OK"
                });
            } else if (data.redirect) {
                window.location.href = data.redirect;
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Error adding to wishlist',
                    timer: 1500,
                    showConfirmButton: "OK"
                });
            }
        })
        .catch(err => {
            console.error('Error:', err);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred. Please try again.',
                timer: 1000,
                showConfirmButton: true
            });
        });
    }

document.addEventListener('DOMContentLoaded', function() {

    let productQuanity = document.querySelector(".stock-status #productQuanity").value;

    const zoomContainers = document.querySelectorAll('.zoom-container');
        zoomContainers.forEach(container => {
            const img = container.querySelector('#mainImage');
            const lens = container.querySelector('.zoom-lens');
            const zoomFactor = 2; 

            img.addEventListener('load', () => {
                container.addEventListener('mousemove', moveLens);
                container.addEventListener('mouseleave', hideLens);
                container.addEventListener('mouseenter', showLens);
            });

            function moveLens(e) {
                e.preventDefault();

                const rect = container.getBoundingClientRect();
                const imgRect = img.getBoundingClientRect();

                // Mouse position relative to the container
                let posX = e.clientX - rect.left;
                let posY = e.clientY - rect.top;

                // Calculate image's actual dimensions with object-fit: contain
                const imgWidth = img.naturalWidth;
                const imgHeight = img.naturalHeight;
                const containerWidth = rect.width;
                const containerHeight = rect.height;

                // Compute the displayed image size (considering object-fit: contain)
                const ratio = Math.min(containerWidth / imgWidth, containerHeight / imgHeight);
                const displayWidth = imgWidth * ratio;
                const displayHeight = imgHeight * ratio;
                const offsetX = (containerWidth - displayWidth) / 2;
                const offsetY = (containerHeight - displayHeight) / 2;

                // Adjust posX and posY to be relative to the actual image content
                posX = Math.max(offsetX, Math.min(posX, offsetX + displayWidth));
                posY = Math.max(offsetY, Math.min(posY, offsetY + displayHeight));

                // Lens position
                const lensWidth = lens.offsetWidth;
                const lensHeight = lens.offsetHeight;
                let lensX = posX - lensWidth / 2;
                let lensY = posY - lensHeight / 2;

                // Keep lens within container bounds
                lensX = Math.max(0, Math.min(lensX, containerWidth - lensWidth));
                lensY = Math.max(0, Math.min(lensY, containerHeight - lensHeight));

                lens.style.left = `${lensX}px`;
                lens.style.top = `${lensY}px`;

                // Calculate the background position for the lens
                const bgPosX = ((posX - offsetX) / displayWidth) * imgWidth * zoomFactor - lensWidth / 2;
                const bgPosY = ((posY - offsetY) / displayHeight) * imgHeight * zoomFactor - lensHeight / 2;

                lens.style.backgroundImage = `url(${img.src})`;
                lens.style.backgroundSize = `${imgWidth * zoomFactor}px ${imgHeight * zoomFactor}px`;
                lens.style.backgroundPosition = `-${bgPosX}px -${bgPosY}px`;
            }

            function hideLens() {
                lens.style.opacity = '0';
            }

            function showLens() {
                lens.style.opacity = '1';
            }               
        });

        // Quantity Controls
        const quantityInput = document.getElementById('quantity');
        if (quantityInput) {
            document.getElementById('quantity-minus').addEventListener('click', () => {
                let value = parseInt(quantityInput.value);
                if (value > 1) quantityInput.value = value - 1;
            });

            document.getElementById('quantity-plus').addEventListener('click', () => {
                let value = parseInt(quantityInput.value);
                if (value < productQuanity){
                    quantityInput.value = value + 1;
                }
            });

            quantityInput.addEventListener('change', () => {
                let value = parseInt(quantityInput.value);
                if (value < 1) {
                    quantityInput.value = 1
                }
                if (value > productQuanity ){
                    quantityInput.value = productQuanity;
                } 
            });
        } 
        
});


</script>

<% if (locals.showBlockedNotification) { %>
    <%- include("../../views/partial/user/blockedNotification") %>
<% } %>

<%- include ("../../views/partial/user/footer") %>