<%- include('../partial/user/header') %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<link rel="stylesheet" href="/style/user/orderFailure.css"> 

<div class="container py-5 animate-in">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="failure-container text-center">
                <!-- Failure Icon -->
                <div class="failure-icon failure-animation">
                    <i class="bi bi-exclamation-circle-fill"></i>
                </div>
                
                <!-- Failure Message -->
                <h2 class="mb-3 fw-bold">Payment Failed</h2>
                <p class="mb-4">We couldn't process your payment. <%= error_description %></p>
                
                <!-- Order Details -->
                <div class="order-details animate-in" style="animation-delay: 0.2s;">
                    <h5 class="fw-bold">Order Information</h5>
              
                    <div class="detail-row">
                        <span class="detail-label">Date:</span>
                        <span class="detail-value"><%= currentDate %></span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Payment Method:</span>
                        <span class="detail-value">Online</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Total Amount:</span>
                        <span class="detail-value fw-bold" style="color: var(--accent-color);">â‚¹ <%= totalAmount.toFixed(2) %></span>
                    </div>
                </div>
                
                <!-- Error Details -->
                <div class="error-details animate-in" style="animation-delay: 0.3s;">
                    <h5 class="fw-bold">Error Details</h5>
                    <div class="error-message">
                        <p class="mb-0"><i class="fas fa-info-circle me-2"></i> <%= error_description %></p>
                    </div>
                </div>

                <!-- Payment Options -->
                <div class="order-details animate-in" style="animation-delay: 0.4s;">
                    <h5 class="fw-bold">Choose a Payment Method</h5>
                    <div class="payment-options">
                        <div class="payment-option-item d-flex align-items-center selected">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="online" value="Online" checked>
                            </div>
                            <label class="ms-2 flex-grow-1 text-start" for="online">
                                <div class="fw-medium">Online (Razorpay)</div>
                                <small class="text-muted">Credit/Debit Cards, UPI, Net Banking, EMI</small>
                            </label>
                        </div>
                        <div class="payment-option-item d-flex align-items-center">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="Wallet" <%= walletBalance < totalAmount ? 'disabled' : '' %>>
                            </div>
                            <label class="ms-2 flex-grow-1 text-start" for="wallet">
                                <div class="fw-medium">Wallet</div>
                                <small class="text-muted">Pay using your account wallet balance</small>
                            </label>
                            <div>
                                <i class="fas fa-wallet"></i>
                            </div>
                        </div>
                        <div class="payment-option-item d-flex align-items-center">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="COD"  <%= totalAmount < 1000 ? 'disabled' : '' %>>
                            </div>
                            <label class="ms-2 flex-grow-1 text-start" for="cod">
                                <div class="fw-medium">Cash on Delivery (COD)</div>
                                <small class="text-muted">Pay when you receive your order</small>
                            </label>
                            <div>
                                <i class="fas fa-money-bill-wave"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="d-flex justify-content-center mt-4 animate-in" style="animation-delay: 0.6s;">
                    <div class="d-grid gap-3 d-sm-flex">
                        <button class="btn btn-danger px-4 py-2" id="retryPayment">
                            <i class="fas fa-redo-alt btn-icon"></i> Retry Payment
                        </button>
                        <a href="/orders" class="btn btn-outline px-4 py-2">
                            <i class="fas fa-shopping-bag btn-icon"></i> View Order Details
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Additional Info -->
            <div class="text-center mt-4 animate-in footer-text" style="animation-delay: 0.7s;">
                <p class="mb-0">For any queries related to your order, please contact our <a href="/contactUs">customer support</a>.</p>
            </div>
        </div>
    </div>
</div>

<script>  
    document.addEventListener('DOMContentLoaded', function() {
        // Payment option selection
        const paymentOptions = document.querySelectorAll('.payment-option-item');
        paymentOptions.forEach(option => {
            option.addEventListener('click', function() {
                paymentOptions.forEach(item => item.classList.remove('selected'));
                this.classList.add('selected');
                const radio = this.querySelector('input[type="radio"]');
                radio.checked = true;
            });
        });

        // Retry Payment functionality
        const retryButton = document.getElementById('retryPayment');
        retryButton.addEventListener('click', async function(e) {
            e.preventDefault();

            const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPayment) {
                Swal.fire('Error', 'Please select a payment method', 'error');
                return;
            }

            const urlParams = new URLSearchParams(window.location.search);
            const totalAmount = urlParams.get('totalAmount');
            const addressId = urlParams.get('addressId');

            if (!totalAmount || !addressId) {
                Swal.fire('Error', 'Missing order details. Please try again from the checkout page.', 'error');
                return;
            }

            if (selectedPayment.value === "COD" &&  totalAmount < 1000) {
                Swal.fire('Error', 'Minimum 1000 is Required for cash on delivery ', 'error');
                return;
            }

            const orderData = {
                addressId: addressId,
                paymentMethod: selectedPayment.value,
                totalAmount: Number(totalAmount)
            };

            try {
                if (orderData.paymentMethod === 'Online') {
                    retryButton.disabled = true;
                    retryButton.innerHTML = `
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Processing...
                    `;

                    const response = await fetch('/order/create-razorpay-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ amount: parseInt(totalAmount) })
                    });

                    const data = await response.json();

                    retryButton.disabled = false;
                    retryButton.innerHTML = `<i class="fas fa-redo-alt btn-icon"></i> Retry Payment`;

                    if (!data.success) {
                        if(data.redirect){
                            Swal.fire({ 
                                icon: "warning", title:data.message || 'Session Data is Expired..!', 
                                showConfirmButton: "OK",timer:1500, timerProgressBar: true
                            })
                            .then(() => {      
                                window.location = data.redirect 
                            }) 
                        }else {
                            Swal.fire('Error', data.message || 'Failed to create payment order', 'error');
                        }
                        return;
                    }

                    const options = {
                        key: data.checkoutData?.razorpayKeyId || data.key_id,
                        amount: data.order.amount,
                        currency: "INR",
                        name: "Digitan Den",
                        description: "Order Payment Retry",
                        order_id: data.order.id,
                        handler: async function (response) {
                            try {
                                orderData.razorpay_payment_id = response.razorpay_payment_id;
                                orderData.razorpay_order_id = response.razorpay_order_id;
                                orderData.razorpay_signature = response.razorpay_signature;

                                Swal.fire({
                                    title: 'Processing Payment',
                                    text: 'Please wait while we verify your payment...',
                                    allowOutsideClick: false,
                                    didOpen: () => {
                                        Swal.showLoading();
                                    }
                                });

                                const placeOrderResponse = await fetch('/order/retry-payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(orderData)
                                });

                                const placeOrderResult = await placeOrderResponse.json();

                                if (placeOrderResult.success) {

                                    Swal.fire({ 
                                        icon: "success", title:"Success" , text : placeOrderResult.message || 'Order Placed succussfully..', 
                                        showConfirmButton: "OK",timer:1500, timerProgressBar: true
                                    })
                                    .then(() => {      
                                        window.location.href = '/order-success'; 
                                    })
                                } else {
                                    if(placeOrderResult.redirect){
                                        Swal.fire({ 
                                            icon: "warning", title:placeOrderResult.message || 'An error occurred', 
                                            showConfirmButton: "OK",timer:1500, timerProgressBar: true
                                        })
                                        .then(() => {      
                                            window.location = placeOrderResult.redirect 
                                        }) 
                                    }else {
                                        Swal.fire('Error', placeOrderResult.message || 'An error occurred', 'error');
                                    }
                                }
                            } catch (error) {
                                console.error('Payment verification error:', error);
                                Swal.fire('Error', error.message || 'An error occurred', 'error');
                            }
                        },
                        prefill: {
                            name: data.user.name,
                            email: data.user.email,
                            contact: data.user.contact
                        },
                        theme: {
                            color: "#6366f1"
                        },
                        modal: {
                            ondismiss: function() {
                                window.location.href = `/order-failure?totalAmount=${totalAmount}&addressId=${orderData.addressId}&error_description=Payment was cancelled by the user`;
                            }
                        }
                    };

                    const razorpayInstance = new Razorpay(options);
                    razorpayInstance.open();

                    razorpayInstance.on('payment.failed', function(response) {
                        window.location.href = `/order-failure?totalAmount=${totalAmount}&addressId=${orderData.addressId}&error_description=${encodeURIComponent(response.error.description || 'Payment failed')}`;
                    });

                } else {
                    const response = await fetch('/order/retry-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orderData)
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({ 
                            icon: "success", title:"Success" , text : result.message || 'Order Placed succussfully..', 
                            showConfirmButton: "OK",timer:1500, timerProgressBar: true
                        })
                        .then(() => {      
                            window.location.href = '/order-success'; 
                        })
                    } else {
                        if(result.redirect){
                            Swal.fire({ 
                                icon: "warning", title:result.message || 'Session Data is Expired..!', 
                                showConfirmButton: "OK",timer:1500, timerProgressBar: true
                            })
                            .then(() => {      
                                window.location = result.redirect 
                            }) 
                        }else {
                            Swal.fire('Error', result.message || 'An error occurred', 'error');
                        }
                    }
                }
            } catch (error) {
                console.error('Error retrying payment:', error);
                retryButton.disabled = false;
                retryButton.innerHTML = `<i class="fas fa-redo-alt btn-icon"></i> Retry Payment`;
                Swal.fire('Error', 'An error occurred while retrying the payment', 'error');
            }
        });
    });
</script>

<%- include('../partial/user/footer') %>