<%- include('../partial/user/header') %>

<style>
    .profile-photo {
        width: 130px;
        height: 130px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid var(--card-bg);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }

    .upload-btn, .remove-btn {
        background-color: rgba(99, 102, 241, 0.1);
        color: #6366f1;
        border: 1px dashed #6366f1;
        padding: 8px 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 5px 0;
    }

    .upload-btn:hover, .remove-btn:hover {
        background-color: rgba(99, 102, 241, 0.2);
    }

    .form-control {
        border-radius: 8px;
        padding: 12px;
        border: 1px solid var(--border-color);
        background-color: var(--card-bg);
        color: var(--text-color);
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
    }

    .info-text {
        color: #6366f1;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }

    .default-profile-icon {
        width: 100px;
        height: 130px;
        border-radius: 50%;
        background-color: #007bff;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 3px solid var(--card-bg);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .default-profile-icon i {
        font-size: 60px;
        color: white;
    }
</style>

<div class="body">
    <div class="container-fluid profile-container">
        <div class="row g-4">
            <%- include('../partial/user/sidebar.ejs') %>
            <div class="col-12 col-md-9">
                <div class="content-area">
                    <h4 class="section-title">EDIT PROFILE</h4>
                    <form id="editProfileForm" method="POST" enctype="multipart/form-data">
                        <div class="row g-4 align-items-center mb-4">   
                            <div class="col-12 col-md-3 text-center">
                                <div class="d-flex flex-column align-items-center">
                                    <% if (user.profileImage ) { %>
                                        <img src="/uploads/user/profileimages/<%= user.profileImage %>" alt="<%= user.username %>" class="profile-photo mb-3" id="profilePhotoPreview">
                                    <% } else { %>
                                        <div class="default-profile-icon mb-3" id="profilePhotoPreview">
                                            <i class="bi bi-person-fill"></i>
                                        </div>
                                    <% } %>
                                    <label class="upload-btn">
                                        <i class="bi bi-camera me-2"></i>Change Photo
                                        <input type="file" class="d-none" id="photoUpload" name="profileImage" accept="image/*">
                                    </label>                                    
                                    <button type="button" class="remove-btn" id="removePhotoBtn">
                                        <i class="bi bi-trash me-2"></i>Remove Photo
                                    </button> 
                                    <!-- Modal for Image Cropping -->
                                    <div id="crop-modal" style="display: none;">
                                        <img id="crop-image" style="max-width: 100%;">
                                        <button type="button" id="confirm-crop" class="btn btn-success">Confirm Crop</button>
                                    </div>

                                </div>
                            </div>
                            <div class="col-12 col-md-9">
                                <div class="upper-section">
                                    <div class="row g-3">
                                        <div class="col-12 col-md-6">
                                            <label class="form-label">First Name</label>
                                            <input type="text" class="form-control" name="firstName" value="<%= user.firstName || ""%>">
                                            <div class="invalid-feedback"></div>
                                        </div>
                                        <div class="col-12 col-md-6">
                                            <label class="form-label">Last Name</label>
                                            <input type="text" class="form-control" name="lastName" value="<%= user.lastName || "" %>">
                                            <div class="invalid-feedback"></div>
                                        </div>
                                        <div class="col-12 col-md-6">
                                            <label class="form-label">Username</label>
                                            <input type="text" class="form-control" name="username" value="<%= user.username %>">
                                            <div class="invalid-feedback"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="phone-setting">
                                    <div class="row g-3">
                                        <div class="col-12 col-md-6">
                                            <label class="form-label">Phone </label>
                                            <input type="tel" class="form-control" name="phone" value="<%= user.phone || "" %>">
                                            <div class="invalid-feedback"></div>
                                            <div class="info-text">Note: Phone OTP will be sent to your email (<%= user.email %>) if you update this field.</div>
                                        </div>      
                                        <div class="col-12 col-md-6" id="phoneOtpField" style="display: none;">
                                            <label class="form-label">Enter Phone OTP</label>
                                            <input type="text" class="form-control" name="phoneOtp" placeholder="Enter OTP sent to your email">
                                            <div class="invalid-feedback"></div>
                                            <div class="info-text">Check your email (<%= user.email %>) for the OTP.</div>
                                        </div>
                                    </div>
                                </div>   
                            </div>
                        </div>
                        <div class="text-end">
                            <a href="/user/profile" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<%- include('../partial/user/footer') %>

<!-- 
<script>
// Utility Functions
function displayFormErrors(form, errors) {
    clearErrors(form);
    if (errors && typeof errors === 'object') {
        Object.entries(errors).forEach(([field, message]) => {
            const input = form.querySelector(`[name="${field}"]`);
            if (input) {
                input.classList.add('is-invalid');
                const feedback = input.parentElement.querySelector('.invalid-feedback');
                if (feedback) {
                    feedback.textContent = message;
                    feedback.style.display = 'block';
                }
            }
        });
    }
}

function clearErrors(form) {
    form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
    form.querySelectorAll('.invalid-feedback').forEach(el => {
        el.textContent = '';
        el.style.display = 'none';
    });
}

function showSwal(type, title, text, timer) {
    return Swal.fire({
        icon: type,
        title,
        text,
        showConfirmButton: false,
        timer,
        timerProgressBar: true
    });
}

function showProcessingSwal(title, text) {
    return Swal.fire({
        title,
        text,
        allowOutsideClick: false,
        allowEscapeKey: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
}

document.addEventListener("DOMContentLoaded", () => {
    // Edit Profile Form
    const editProfileForm = document.getElementById('editProfileForm');
    if (editProfileForm) {
        let isPhoneOtpSent = false;
        let isPhotoRemoved = false;

        const photoUpload = document.getElementById('photoUpload');
        const profilePhotoPreview = document.getElementById('profilePhotoPreview');
        const removePhotoBtn = document.getElementById('removePhotoBtn');

        if (photoUpload && profilePhotoPreview) {
            photoUpload.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        // Ensure the existing preview is removed
                        const parent = profilePhotoPreview.parentElement;
                        profilePhotoPreview.remove(); // Remove the old preview

                        // Create new image element
                        const img = document.createElement('img');
                        img.src = event.target.result;
                        img.className = 'profile-photo mb-3';
                        img.id = 'profilePhotoPreview';
                        parent.insertBefore(img, parent.firstChild); // Insert at the top of the container
                        isPhotoRemoved = false;
                        console.log('Image preview updated:', img.src); // Debug log
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        if (removePhotoBtn) {
            removePhotoBtn.addEventListener('click', () => {
                const parent = profilePhotoPreview.parentElement;
                profilePhotoPreview.remove(); // Remove the current preview

                const defaultIcon = document.createElement('div');
                defaultIcon.className = 'default-profile-icon mb-3';   
                 defaultIcon.id = 'profilePhotoPreview';
                defaultIcon.innerHTML = '<i class="bi bi-person-fill"></i>';                  
                parent.insertBefore(defaultIcon, parent.firstChild); 
                isPhotoRemoved = true;
                photoUpload.value = '';
                console.log('Image removed, default icon displayed'); // Debug log
            });
        }

        editProfileForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            clearErrors(editProfileForm);

            // Prepare FormData
            const formData = new FormData(editProfileForm);
            formData.append('removePhoto', isPhotoRemoved);

            // Client-side validation
            const jsonData = Object.fromEntries(formData);
            Object.keys(jsonData).forEach(key => {
                if (typeof jsonData[key] === 'string') {
                    jsonData[key] = jsonData[key].trim();
                }
            });

            const clientErrors = {};
            if (!jsonData.firstName) clientErrors.firstName = "First name is required";
            if (!jsonData.lastName) clientErrors.lastName = "Last name is required";
            if (!jsonData.username) clientErrors.username = "Username is required";
            if (jsonData.phone && !/^\d{10}$/.test(jsonData.phone)) {
                clientErrors.phone = "Phone number must be 10 digits";
            }
            if (isPhoneOtpSent && !jsonData.phoneOtp) {
                clientErrors.phoneOtp = "Phone OTP is required";
            }

            if (Object.keys(clientErrors).length > 0) {
                displayFormErrors(editProfileForm, clientErrors);
                await showSwal('error', 'Error', 'Please fix the errors in the form', 1500);
                return;
            }

            try {
                const url = isPhoneOtpSent ? '/user/verify-phone-otp' : '/user/update-profile';
                console.log('Submitting form to:', url, 'with data:', jsonData); // Debug log
                const processingSwal = showProcessingSwal('Processing...', 'Please wait while we update your profile');

                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                console.log('Server response:', data); // Debug log
                await processingSwal.close();

                if (!response.ok || !data.success) {
                    displayFormErrors(editProfileForm, data.errors);
                    await showSwal('error', 'Error', data.message || 'Profile update failed', 1500);
                    return;
                }

                if (!isPhoneOtpSent && jsonData.phone && jsonData.phone !== '<%= user.phone || "" %>') {
                    document.getElementById('phoneOtpField').style.display = 'block';
                    isPhoneOtpSent = true;
                    await showSwal('success', 'OTP Sent', 'Please check your email for the phone verification OTP', 1000);
                } else {
                    await showSwal('success', 'Success', 'Profile updated successfully', 500);
                    window.location.href = '/user/profile';
                }
            } catch (error) {
                console.error('Profile update error:', error);
                Swal.close();
                await showSwal('error', 'Error', 'Something went wrong: ' + error.message, 1500);
            }
        });
    }
});
</script> -->

<script>
    // Utility Functions
    function displayFormErrors(form, errors) {
      clearErrors(form);
      if (errors && typeof errors === 'object') {
        Object.entries(errors).forEach(([field, message]) => {
          const input = form.querySelector(`[name="${field}"]`);
          if (input) {
            input.classList.add('is-invalid');
            const feedback = input.parentElement.querySelector('.invalid-feedback');
            if (feedback) {
              feedback.textContent = message;
              feedback.style.display = 'block';
            }
          }
        });
      }
    }
    
    function clearErrors(form) {
      form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
      form.querySelectorAll('.invalid-feedback').forEach(el => {
        el.textContent = '';
        el.style.display = 'none';
      });
    }
    
    function showSwal(type, title, text, timer) {
      return Swal.fire({
        icon: type,
        title,
        text,
        showConfirmButton: false,
        timer,
        timerProgressBar: true
      });
    }
    
    function showProcessingSwal(title, text) {
      return Swal.fire({
        title,
        text,
        allowOutsideClick: false,
        allowEscapeKey: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
    }
    
    document.addEventListener('DOMContentLoaded', () => {
      // Edit Profile Form
      const editProfileForm = document.getElementById('editProfileForm');
      if (editProfileForm) {
        let isPhoneOtpSent = false;
        let isPhotoRemoved = false;
    
        const photoUpload = document.getElementById('photoUpload');
        const profilePhotoPreview = document.getElementById('profilePhotoPreview');
        const removePhotoBtn = document.getElementById('removePhotoBtn');
    
        if (photoUpload && profilePhotoPreview) {
          photoUpload.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
              const reader = new FileReader();
              reader.onload = (event) => {
                const parent = profilePhotoPreview.parentElement;
                profilePhotoPreview.remove();
    
                const img = document.createElement('img');
                img.src = event.target.result;
                img.className = 'profile-photo mb-3';
                img.id = 'profilePhotoPreview';
                parent.insertBefore(img, parent.firstChild);
                isPhotoRemoved = false;
                console.log('Image preview updated:', img.src);
              };
              reader.readAsDataURL(file);
            }
          });
        }
    
        if (removePhotoBtn) {
          removePhotoBtn.addEventListener('click', () => {
            const parent = profilePhotoPreview.parentElement;
            profilePhotoPreview.remove();
    
            const defaultIcon = document.createElement('div');
            defaultIcon.className = 'default-profile-icon mb-3';
            defaultIcon.id = 'profilePhotoPreview';
            defaultIcon.innerHTML = '<i class="bi bi-person-fill"></i>';
            parent.insertBefore(defaultIcon, parent.firstChild);
            isPhotoRemoved = true;
            photoUpload.value = '';
            console.log('Image removed, default icon displayed');
          });
        }
    
        editProfileForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          e.stopPropagation();
          clearErrors(editProfileForm);
    
          // Prepare FormData
          const formData = new FormData(editProfileForm);
          formData.append('removePhoto', isPhotoRemoved.toString()); // Ensure boolean is sent as string
    
          // Client-side validation
          const jsonData = Object.fromEntries(formData);
          Object.keys(jsonData).forEach(key => {
            if (typeof jsonData[key] === 'string') {
              jsonData[key] = jsonData[key].trim();
            }
          });
    
          try {
            const url = isPhoneOtpSent ? '/user/verify-phone-otp' : '/user/update-profile';
            
            const processingSwal = showProcessingSwal('Processing...', 'Please wait while we update your profile');
    
            const response = await fetch(url, {
              method: 'POST',
              body: formData,
            });
    
            const data = await response.json();
            console.log('Server response:', data); // Debug log
            await processingSwal.close();
    
            if (!response.ok || !data.success) {
              displayFormErrors(editProfileForm, data.errors);
              await showSwal('error', 'Error', data.message || 'Profile update failed', 1500);
              return;
            }
    
            if (!isPhoneOtpSent && jsonData.phone && jsonData.phone !== '<%= user.phone || "" %>') {
              document.getElementById('phoneOtpField').style.display = 'block';
              isPhoneOtpSent = true;
              await showSwal('success', 'OTP Sent', 'Please check your email for the phone verification OTP', 1000);
            } else {
              await showSwal('success', 'Success', 'Profile updated successfully', 500);
              window.location.href = '/user/profile';
            }
          } catch (error) {
            console.error('Profile update error:', error);
            Swal.close();
            await showSwal('error', 'Error', 'Something went wrong: ' + error.message, 1500);
          }
        });
      } 
    });
    </script>